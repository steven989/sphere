<script>
var test;
$(function(){
    var modalInstance;
    var returnedData;    
    var token;


    // Navigation bar related
    $('#settingLogoutToggle').off("click").on("click",function(){
        $('.profileButtonsContainer.hideOnMobile').toggle();
    });

    // Paint the bubbles

    paintBubbles(<%= raw @raw_bubbles_data %>,<%= raw @notifications %>,<%= raw @bubbles_parameters %>,prettifyBubbles);

    function paintBubbles(raw_bubbles_data,notifications,bubbles_parameters,callback) {
        $('#canvas').bubblify(raw_bubbles_data,notifications,bubbles_parameters,callback);
    }
    
    function prettifyBubbles(canvas,notifications){
        canvas.find('.connectionBubble').each(function(){

            // 1) Notifications
                if (connectionNotification = notifications["connection_level"][$(this).data('connection-id')]) {
                    // 1.1)Progress bar
                    if (connectionNotification["notification_type"] == "connection_expiration") {
                        var remaining_days_until_expiry = connectionNotification["value"]["remaining_days_until_expiry"];
                        var percentageValueOfRemainingDays = Math.max(Math.min(remaining_days_until_expiry*1.0/7.0,1),0.2);
                        $(this).parent('.connectBubbleContainer').circleProgress({
                            // value: percentageValueOfRemainingDays,
                            value: 0.8,
                            thickness:5,
                            lineCap:'round',
                            size: $(this).parent('.connectBubbleContainer').width(),
                            fill: {color: '#ED1C24'},
                            emptyFill: 'rgba(0,0,0,0)',
                            startAngle:(0.5*Math.PI),
                            reverse:true,
                            animationStartValue: 1
                        });
                    }
                    // 1.2) Notification icons
                    var backgroundColor;
                    var content;
                    if (connectionNotification["notification_type"] == "connection_expiration") {
                        backgroundColor = "#ED1C24";
                        content = connectionNotification["value"]["remaining_days_until_expiry"]+"d";
                    } else if (connectionNotification["notification_type"] == "checked_in") {
                        backgroundColor = "#34BF49";
                        content = '<%= fa_icon 'check' %>';
                    } else if (connectionNotification["notification_type"] == "upcoming_plan") {
                        backgroundColor = "#FFB900";
                        content = '<%= fa_icon 'calendar' %>';
                    }
                    var coordinates = getNotificationCoordinate(315,$(this).parent('.connectBubbleContainer').width()/2,14);
                    $(this).parent('.connectBubbleContainer').append('<span class="badge" style="width:28px; height:28px; position:absolute;background-color:'+backgroundColor+';left:'+coordinates.x+'px;bottom:'+coordinates.y+'px;font-size:15px;padding-top:4px;">'+content+'</span>');
                } else {
                    $(this).parent('.connectBubbleContainer').find('.badge').remove();
                }

            // 2) Set some attributes
            $(this).attr('href',"<%= populate_connection_modal_path %>?connection_id="+$(this).data('connection-id'))
            $(this).data('method','get')

            // 3) Modal on clicking each bubble
            $(this).off("click").on("click",function(){
                var formData = new FormData();
                var _this = $(this);

                $('[data-remodal-id=bubbleModal] .modalView').each(function(){
                    if ($(this).prop('id') != 'plans') {$(this).removeClass('hidden').addClass('hidden')}
                        else {$(this).removeClass('hidden')};
                });
                $('[data-remodal-id=bubbleModal]').data("connection-id",_this.data('connection-id'));
                $('.modalView#makePlan input[name=connection_id]').val(_this.data('connection-id'));
                $('.modalView#makePlan input[name=connection_email]').prop('placeholder',"Type "+_this.data("first-name")+"'s email");
                $('.createActivity').each(function(){
                    $(this).attr("href","<%= create_activity_path %>?connection_id="+_this.data('connection-id'));
                });
                    modalInstance = $('[data-remodal-id=bubbleModal]').remodal({
                    closeOnConfirm:false,
                    modifier:'standardModal'
                    });
                $('.modalView#editConnection .modalBottomRightButton').off('click').on('click',function(){
                    toastr.options.newestOnTop = true;
                    var form = $('.modalView#editConnection form');
                    var frequency = form.find('.contactFrequency button').filter(function(){return $(this).hasClass("active") }).data('value');
                    var custom_frequency;
                    formData.append("connection_id",_this.data('connection-id'));
                    if (frequency=="other") { custom_frequency = form.find('.details input').val();}
                    formData.append("contact_frequency",frequency);
                    formData.append("custom_frequency",custom_frequency);
                    formData.append("notes",form.find('[name=notes]').val());
                    formData.append("photo", $('.modalView#editConnection #photoUploader').prop("files")[0]);
                  $.ajax({
                    url: '<%= update_connection_path %>',
                    type: 'PUT',
                    processData: false,
                    contentType: false,
                    data: formData,
                    dataType: 'JSON'
                  }).done(function(data){
                        if (data.status) {
                                if(data.message != undefined /* && alertElement.length > 0 */ ) {
                                    toastr.success(data.message,null, {timeOut: 5000,closeButton:false});                       
                                }
                        } else {
                            toastr.options.closeButton = true;
                            if(data.message != undefined /* && alertElement.length > 0 */) {
                                toastr.error(data.message,null, {timeOut: 10000,closeButton:true});
                            }
                        }
                        if (data.actions != undefined && data.actions.length > 0) {
                            performActions(data.actions);    
                        }
                      });
                })
                resetModal($('[data-remodal-id=bubbleModal]'),3);
                buttonAjax(_this,{});
                modalInstance.open();
            });
        });
    }

    // open modal instance
    function initializeReModal(element,modifier,resetType) {
        modalInstance = $(element).remodal({
        closeOnConfirm:false,
        modifier:modifier
        });
        resetModal($(element),resetType);
        modalInstance.open();        
    }

    // close modal instance 
    function closeModalInstance(timer) {
        setTimeout(function(){
            modalInstance.close();
        },timer);        
    }

    // Photo upload label within bubble modal to change display when a file is selected
    $(".modalView#editConnection #photoUploader").on("change",function(){
            $(".modalView#editConnection label[for=photoUploader]").html($(".modalView#editConnection #photoUploader").prop("files")[0].name);
    });

    // make plans
    function addListenerToPlanForm() {
        $('.modalView#makePlan .modalBottomRightButton').off('click').on('click',function(){
          var form = $('.modalView#makePlan form');
          modalAjaxFormSubmission(form);
        });        
    }


    // Modal resets
    function resetModal(modal,resetType) {

        if (resetType == 1 || resetType == 3) {
            // reset class
            modal.parent().filter(function(){ return $(this).data('default-class') != undefined }).each(function(){
                $(this).prop("class",$(this).data('default-class'));
            })
            // Reset css
            modal.parent().find('*').filter(function(){
                return $(this).data('default-css') != undefined;
            }).each(function(){
                var _this = $(this); 
                eval($(this).data('default-css')).forEach(function(cssReset){ 
                    _this.css(cssReset.attribute,cssReset.value);
                });
            });

            // Reset the fields that should be hidden by default
            modal.parent().find('.default_hidden').each(function(){
                $(this).removeClass('hidden').addClass('hidden');
            });
        }

        if (resetType == 2 || resetType == 3) { 
            // Reset values
            modal.parent().find('input').each(function(){
                if($(this).prop('type') != 'hidden' && $(this).prop('type') != 'checkbox' && $(this).data('skip-clear') == undefined ) {
                    $(this).val('');
                }
            })
        }
    }

    // General modal ajax submission function
    function modalAjaxFormSubmission(form) {
        test = form;
      $.ajax({
        url: form.attr('action'),
        type: form.attr('method'),
        data: form.serialize(),
        dataType: 'JSON'
      }).done(function(data){
            resetModal(form.closest('.remodal'),1);
            if (data.status) {
                    if(data.message != undefined /* && alertElement.length > 0 */ ) {
                        toastr.success(data.message,null, {timeOut: 5000,closeButton:false});
                    }
                    setTimeout(function(){
                        form.find('.alert').addClass('hidden');
                        resetModal(form.closest('.remodal'),2);
                        modalInstance.close();
                    },2000)
            } else {
                    toastr.options.closeButton = true;
                    if(data.message != undefined /* && alertElement.length > 0 */) {
                        toastr.error(data.message,null, {timeOut: 10000,closeButton:true});
                    }
            }
            if (data.data != undefined) {
                returnedData = data.data;
            }
            if (data.actions != undefined && data.actions.length > 0) {
                performActions(data.actions);
            }
          });
    }


    // Add connections

    $('.modalView#mainImportView .modalBottomFullButton').off('click').on('click',function(){
      var form = $('.modalView#mainImportView form');
      modalAjaxFormSubmission(form);
    })    


    $('#addConnection').off('click').on('click',function(){
        initializeReModal('[data-remodal-id=importModal]','standardModal',3);
    });

    $('#navigation-tabs-container').easytabs({
        updateHash: false,
        tabs: "ul.etabs > li",
        animate: true,
        transitionIn: 'fadeIn',
        transitionOut: 'fadeOut',
        updateHash: true
    });


    function getNotificationCoordinate(angleInDegrees,attacheeRadiusInPixels,selfRadiusInPixels) {
        var x = Math.cos(angleInDegrees*(Math.PI/180))*attacheeRadiusInPixels + attacheeRadiusInPixels - selfRadiusInPixels;
        var y = Math.sin(angleInDegrees*(Math.PI/180))*attacheeRadiusInPixels + attacheeRadiusInPixels - selfRadiusInPixels;
        return {x:x,y:y};
    }

    // Importing contacts
    $('#importContactsGoogle').off("click").on("click",function(){
        buttonAjax($(this),$(this).data('data-to-send'));
    });

    // Account settings
    $('#accountSettings').off("click").on("click",function(){
        buttonAjax($(this),{});
    });

    $('.modalView#settingsSelect .modalBottomLeftButton').off("click").on("click",function(){
        closeModalInstance(0);
    });

    $('.modalView#settingsSelect .modalBottomRightButton').off("click").on("click",function(){
        var dataObject = {}
        $('.settingInput').each(function(){
            if ($(this).prop('type') == "checkbox") {
                dataObject[$(this).prop('name')] = $(this).prop('checked');
            } else if ($(this).prop('type') == 'select-one') {
                dataObject[$(this).prop('name')] = $(this).find('option:selected').val();
            } else {
                dataObject[$(this).prop('name')] = $(this).val();
            }
        })

        var dataToSend = {data:dataObject};
        buttonAjax($(this),dataToSend);
    });

    // Generic listener for ajax-enabled buttons

    $('.ajaxButton').each(function(){
        $(this).off("click").on("click",function(){
            buttonAjax($(this),$(this).data('data-to-send'));
        });
    });

    // Standard ajax call for buttons
    function buttonAjax(button,data) {
        event.preventDefault();
        event.stopPropagation();
        // notification options
        toastr.options.newestOnTop = true;
        var alertElement = $(button.data('alert-element'));
          $.ajax({
            url: button.attr('href'),
            type: button.data('method'),
            data: eval(data),
            dataType: 'JSON'
          }).done(function(data){
                if (data.status) {
                        if(data.message != undefined /* && alertElement.length > 0 */ ) {
                            toastr.success(data.message,null, {timeOut: 5000,closeButton:false});
                        }
                } else {
                    toastr.options.closeButton = true;

                    if(data.message != undefined /* && alertElement.length > 0 */) {
                        toastr.error(data.message,null, {timeOut: 10000,closeButton:true});
                    }
                }
                if (data.data != undefined) {
                    returnedData = data.data;
                }
                if (data.actions != undefined && data.actions.length > 0) {
                    performActions(data.actions);    
                }
          })
    }

    // Specific callback functions for after modal population
    function populateBubblesModal() {
        // Main screen
        var name = returnedData.name;
        var lastHangout = returnedData.lastPlanString;
        var nextHangout = returnedData.upcomingPlanString;
        var photoUrl = returnedData.photo;
        var allTags = returnedData.all_tags;
        var connectionTags = returnedData.connection_tags;
        var notes = returnedData.notes;
        var contact_frequency = returnedData.contact_frequency;
        var target_contact_interval_in_days = returnedData.target_contact_interval_in_days;

        $('[data-remodal-id=bubbleModal] .modalView#plans span.name').html(name);
        $('[data-remodal-id=bubbleModal] .modalView#plans span.lastHangout').html(lastHangout);
        $('[data-remodal-id=bubbleModal] .modalView#plans img.photo').attr('src',photoUrl);
        $('[data-remodal-id=bubbleModal] .modalView#plans span.nextHangout').html(nextHangout);
        if (returnedData.hasUpcomingPlan) {
            $('.modalView#makePlan input[name=date]').val(returnedData.planData.date);
            $('.modalView#makePlan input[name=time]').val(returnedData.planData.time);
            $('.modalView#makePlan input[name=duration]').val(returnedData.planData.length);
            $('.modalView#makePlan input[name=name]').val(returnedData.planData.name);
            $('.modalView#makePlan input[name=location]').val(returnedData.planData.location);
            $('.modalView#makePlan input[name=details]').val(returnedData.planData.details);
            $('.modalView#makePlan input[name=plan_id]').val(returnedData.planData.id);
            $('.modalView#makePlan div#deleteEvent').removeClass('hidden');
            $('.modalView#makePlan div#deleteEvent').off('click').on('click',function(){
                buttonAjax($(this),{plan_id:returnedData.planData.id,notify:$('.modalView#makePlan #notify').prop('checked')});
            });
            $('.modalView#makePlan form').attr('action',"<%= modify_plan_path %>").attr('method','PUT');
            $('.modalView#makePlan .modalBottomRightButton').html("UPDATE");
            $('.modalView#plans .modalBottomLeftButton').html("RESCHEDULE");
            
            addListenerToPlanForm();
        } else {
            $('.modalView#makePlan div#deleteEvent').removeClass('hidden').addClass('hidden');
            $('.modalView#makePlan form').attr('action',"<%= plans_path %>").attr('method','POST');
            addListenerToPlanForm();
            $('.modalView#makePlan .modalBottomRightButton').html("PUT IN CALENDAR");
            $('.modalView#plans .modalBottomLeftButton').html("MAKE PLANS");
        }

        // Related to the tagging field in the modal. Used jQuery Tokenize plugin, but made slight modifications to the plugin so that upon clearing all tokens it doesn't trigger the callbacks that is triggered for one-by-one removing token
         if ((typeof token == "undefined")) {
             token = $('.modalView#plans #tokenize').tokenize({
                autosize:true,
                onAddToken:function(){
                    var idReference = returnedData;
                    if (!isSubset(token.toArray(),idReference.connection_tags,["$add$tag$"],[])) { // if the new array is NOT a subset of the old array, then update the backend
                        buttonAjax($('.modalView#plans #tokenize'),{connection_id:idReference.connection_id,tags:token.toArray().filter(function(el){return el != "$add$tag$"})});
                    }
                },
                onRemoveToken:function() {
                    var idReference = returnedData;
                    if (!isSubset(idReference.connection_tags,token.toArray(),[],["$add$tag$"])) { // if the old array is NOT a subset of the new array, then update the backend
                        buttonAjax($('.modalView#plans #tokenize'),{connection_id:idReference.connection_id,tags:token.toArray().filter(function(el){return el != "$add$tag$"})});
                    }
                }
            });            
         }
         token.clear();
        $('.modalView#plans #tokenize').html("");
        allTags.forEach(function(tag){
            $('.modalView#plans #tokenize').append("<option value="+tag+">"+tag+"</option>")
        });

        $('.modalView#plans .modalTokenBox li.TokenSearch input').off('focusin').on('focusin',function(){
            token.tokenRemove("$add$tag$");
        });
        $('.modalView#plans .modalTokenBox li.TokenSearch input').off('focusout').on('focusout',function(){

            if (token.toArray().length == 0) {
                token.tokenAdd("$add$tag$","+ Add Tags");
                $('.modalView#plans .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('span').css("margin-right","10px");
                $('.modalView#plans .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('a').remove();                
            }
        })
        
        if (connectionTags.length == 0) {
            token.tokenAdd("$add$tag$","+ Add Tags");
            $('.modalTokenBox ul.TokensContainer li.Token span').css("margin-right","10px");
            $('.modalView#plans .modalTokenBox li.Token a').remove();
        } else {
            connectionTags.forEach(function(tag){
                token.tokenAdd(tag,tag);
            });
        }

        // Related to the preferences view

        if (["monthly","weekly","other"].indexOf(contact_frequency) == -1) {
            contact_frequency = "monthly"; // Default to monthly
        } 

        $('.modalView#editConnection form [name=notes]').val(notes);
        if (target_contact_interval_in_days != undefined && target_contact_interval_in_days != "undefined" && target_contact_interval_in_days > 0) {$('.modalView#editConnection form .details input').val(target_contact_interval_in_days);}
        if (contact_frequency == "other") {
            $('.modalView#editConnection form .details').slideDown();
        } else {
            $('.modalView#editConnection form .details').css("display","none");
        }

        $('.modalView#editConnection .contactFrequency button').each(function(){
            if ($(this).data('value') == contact_frequency) {
                $(this).removeClass('active').addClass('active');
            } else {
                $(this).removeClass('active');
            }
            $(this).off("click").on("click",function(){
                event.preventDefault();
                event.stopPropagation();
                $(this).siblings().each(function(){
                    $(this).removeClass('active');
                })
                if($(this).data('value') == "other") {
                    $('.modalView#editConnection form .details').slideDown();
                } else {
                    $('.modalView#editConnection form .details').slideUp();
                }
                $(this).removeClass('active').addClass('active');
            })
        })
    }

    function populateSettingsForm () {

        var form = $('.modalView#settingsSelect #settingsContainer');
        form.find('#send_event_booking_notification_by_default_title').html(returnedData.send_event_booking_notification_by_default.title);
        form.find('#send_event_booking_notification_by_default_value').prop('checked',returnedData.send_event_booking_notification_by_default.value);
        form.find('#share_my_calendar_with_contacts_title').html(returnedData.share_my_calendar_with_contacts.title);
        form.find('#share_my_calendar_with_contacts_value').prop('checked',returnedData.share_my_calendar_with_contacts.value);
        form.find('#default_contact_interval_in_days_title').html(returnedData.default_contact_interval_in_days.title);
        form.find('#default_contact_interval_in_days_value').val(returnedData.default_contact_interval_in_days.value);
        form.find('#event_add_granularity_title').html(returnedData.event_add_granularity.title);
        form.find('#event_add_granularity_detailed_value').prop("selected", (returnedData.event_add_granularity.value == 'detailed'));
        form.find('#event_add_granularity_quick_value').prop("selected", (returnedData.event_add_granularity.value == 'quick'));

        initializeReModal("[data-remodal-id=settingsModal]","standardModal",1);
    }

    // Predefined set of actions can be called by passing an array of actions into this function. Useful for Rails to call specific follow up actions
    function performActions(actionsArray) {
        actionsArray.forEach(function(actionObject){
            if(actionObject.action=="popup_refresh_main_on_close") {
                var win = window.open(actionObject.url);
            var checkConnect = setInterval(function() {
                    if (!win || !win.closed) return;
                    clearInterval(checkConnect);
                    window.location.reload();
                }, 100);                        
            } else if (actionObject.action=="unhide") {
                $(actionObject.element).removeClass('hidden');
            } else if (actionObject.action == "change_css") {
                $(actionObject.element).css(actionObject.css.attribute,actionObject.css.value);
            } else if (actionObject.action == "transitionViews") {
                transition($(actionObject.from),$(actionObject.to));
            } else if (actionObject.action == "function_call") {
                eval(actionObject.function);
            } else if (actionObject.action == "add_class") {
                $(actionObject.element).removeClass(actionObject.class).addClass(actionObject.class);
            } else if (actionObject.action == "remove_class") {
                $(actionObject.element).removeClass(actionObject.class);
            }
        });
    }

    // Toggle check in button status

    function checkInButtons(state=true,options={}) {
        _this = $('#checkinButton');
        if (state) {
            _this.html("CHECK IN");
            _this.removeClass('disabled');
            if (_this.data('transition-button') != undefined ) {
                _this.addClass('transitionButton');
                _this.removeData('transition-button');
                _this.off("click").on("click",function(){
                    transition($($(this).data('current')),$($(this).data('target')));
                });
            }
            if( _this.data('ajax-button') != undefined ) {
                _this.addClass('ajaxButton');
                _this.removeData('ajax-button');
                _this.off("click").on("click",function(){
                    buttonAjax($(this),$(this).data('data-to-send'));                    
                });
            }
        } else {
            _this.off("click");
            _this.html("CHECKED IN TODAY!");
            _this.removeClass('disabled').addClass('disabled');
            if (_this.hasClass('transitionButton')) {
                _this.data("transition-button",true);
                _this.removeClass('transitionButton');
            }
            if (_this.hasClass('ajaxButton')) {
                _this.data("ajax-button",true);
                _this.removeClass('ajaxButton');
            }
        }
    }

    // This function takes the JSON list of contacts and populate it onto the popup
    function populateImportSelectionList(list) {
        $('.modalView#listSelect .importSelectionTable tbody').html("");
        var incrementer = 0;
        var contacts = list;
        returnedData,list = null; //this is to clear up the reference to the object to make it available for garbage collection after we're done
        contacts.forEach(function(contact){
            contact.incID = incrementer;
            $('.modalView#listSelect #importSelectionTable tbody').append('<tr data-inc-id='+incrementer+'><td class="import" ><input type="checkbox" data-inc-id='+incrementer+' data-id="'+contact.id+'" data-name="'+contact.name+'" data-email="'+contact.email+'" data-phone="'+contact.phone.join('|>-<+|%')+'" data-other-emails="'+contact.other_emails.join('|>-<+|%')+'" ></td><td class="name" >'+contact.name+'</td><td class="email">'+contact.email+'</td><td class="phone">'+contact.phone.join(', ')+'</td><td class="other_emails">'+contact.other_emails.join(', ')+'</td></tr>');
            incrementer++;
        });
        
        $('#importContacts .search').off("keyup").on("keyup",function(){
            var keyword = $(this).val().toLowerCase();
            var matchedItemsIDs = contacts.filter(function(c){ return ((c.name+" "+c.email+" "+c.phone.join(', ')+" "+c.other_emails.join(', ')).toLowerCase().indexOf(keyword) > -1 ) }).map(function(c){return c.incID });
            $('#importContacts table tbody tr').each(function(){
                if ( matchedItemsIDs.indexOf($(this).data('inc-id')) > -1 ) {
                    $(this).removeClass("hidden");
                } else {
                    $(this).removeClass("hidden").addClass('hidden');
                }
            });

        });
        $('.modalView#listSelect .modalBottomRightButton').off("click").on('click',function(){
            var contactListToSend = [];
            $('#importContacts table tbody tr td.import input[type=checkbox]').each(function(){
                if ($(this).prop('checked')) {
                    contactListToSend.push({id:$(this).data('id'),name:$(this).data('name'),email:$(this).data('email'),phone:$(this).data('phone'),other_emails:$(this).data('other-emails') })
                }
            });
            buttonAjax($(this),{contactsToImport:contactListToSend});
        });

        
    }


// utility functions

    // check if an array is a subset of another array
    function isSubset(x,y,xValuesToIgnore,yValuesToIgnore) {
        x_removed = xValuesToIgnore.length > 0 ? x.filter(function(xEl){ return xValuesToIgnore.indexOf(xEl) == -1 }) : x;
        y_removed = yValuesToIgnore.length > 0 ? y.filter(function(yEl){ return yValuesToIgnore.indexOf(yEl) == -1 }) : y;
        var result = true;
        if (x_removed.length > 0) {
            x_removed.forEach(function(el){
                if(y_removed.indexOf(el) == -1) {result = false;}
            });        
        }
        return result;
    }



})

</script>
<div id="profile">
    <div id="logo">
        <%= image_tag "logo-white", width:"125" %>
    </div>
    
        <div class="profileButtonsContainer showOnMobile">
            <div class="profileButton" id="addConnection" >
                <%= fa_icon 'user-plus' %>
            </div>
            <div class="profileButton showOnMobile" id="settingLogoutToggle" style="display:none">
                <%= fa_icon 'bars' %>
            </div>
        </div>
        <div class="profileButtonsContainer hideOnMobile showOnDesktop" >
            <div class="profileButton" id="accountSettings" href="<%= get_user_settings_path(current_user) %>" data-method="GET">
                <p class="showOnMobile" style="display:none;">Settings</p>
                <%= fa_icon 'cog' %>
            </div>
            <div class="divider showOnMobile" style="display:none;"></div>
            <div class="profileButton" id="logout">
                <p class="showOnMobile" style="display:none;">Log out</p>
                <a href="<%= logout_path %>"><%= fa_icon 'sign-out' %></a>
            </div>
        </div>    
</div>

<div id="navigation-tabs-container">
    <div class="topTabs-header clearfix">
        <ul class="etabs tabs" id="navigation">
            <li class="tab"><a href="#mySphere"><%= fa_icon 'circle-o' %><br><span class="hideOnMobile">MY SPHERE</span></a></li>
            <li class="tab"><a href="#challenges"><%= fa_icon 'map' %><br><span class="hideOnMobile">CHALLENGES</span></a></li>
            <li class="tab"><a href="#progress"><%= fa_icon 'bar-chart' %><br><span class="hideOnMobile">PROGRESS</span></a></li>
            <li class="tab"><a href="#achievements"><%= fa_icon 'star' %><br><span class="hideOnMobile">ACHIEVEMENTS</span></a></li>
        </ul>        
    </div> 
    <div class="topTabsContent">
        <div id="mySphere">

            <div id="canvas" style="position: relative; margin: auto;"></div>            

        </div>
        <div id="challenges">
            <div class="title">
                <h1 class="textDarkGray">Your challenges for the week</h1>
            </div>
            <div class="container">
                <div class="row">
                    <% @challenges.each  do |challenge| %>
                        <div class="cardColumn col-lg-4 col-md-4 col-sm-6 col-sm-6 col-xs-12">
                            <div class="card challengeCard">
                                <div class="title">
                                    <h2 class="textDarkGray"><%= challenge.name %></h2>
                                </div>
                                <div class="graphic">
                                    <%= challenge.graphic.blank? ? "" : (image_tag challenge.graphic, alt:"Challenge Graphics") %>
                                </div>
                                <div class="subtitle">
                                   <p class="textDarkGray"><%= challenge.instructions %></p>
                                </div>
                                <div class="buttons">
                                    <div class="sphereGreenBackground hoverable modalBottomLeftButton">
                                        Start
                                    </div>
                                    <div class="sphereBlueBackground hoverable modalBottomRightButton">
                                        Learn
                                    </div>
                                </div>
                            </div> 
                        </div>
                    <% end %>                    
                </div>
            </div>
        </div>
        <div id="progress">
            <div class="title">
                <h1 class="textDarkGray">How you're doing so far</h1>
            </div>
            <div id="levelDisplay">
                <div class="content">
                    <div class="graphic">
                        <%= @level_object.graphic.blank? ? "" : (image_tag @level_object.graphic, alt:"Level Graphic") %>
                    </div>
                    <div class="details">
                        <div class="level">
                            <h2 class="textDarkGray">Level <%= @level_num %></h2>
                        </div>
                        <div class="progress progressBar">
                            <div class="progress-bar bar-green" style="width:<%= @level_progress_percent_string %>"></div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="details">
                
            </div>
        </div>
        <div id="achievements">
            <div class="title">
                <h1 class="textDarkGray">Achievements</h1>
            </div>
            <div class="container">
                <div class="row">
                    <% @badges.each  do |badge| %>
                        <div class="cardColumn col-lg-4 col-md-4 col-sm-6 col-sm-6 col-xs-12">
                            <div class="card badgeCard">
                                <div class="title">
                                    <h2 class="textDarkGray"><%= badge.name %></h2>
                                </div>
                                <div class="graphic">
                                    <%= badge.graphic.blank? ? "" :  (image_tag badge.graphic, alt:"Badge Graphics")  %>
                                </div>
                                <div class="subtitle">
                                   <p class="textDarkGray"><%= badge.description %></p>
                                </div>
                            </div> 
                        </div>
                    <% end %>                    
                </div>
            </div>            
        </div>
    </div>
</div>

<div data-remodal-id="bubbleModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="plans">
        <div class="modalContentContainer">
            <div style="color:#656268; font-size:20px;"><span class="name"></span></div>
            <div style="color:#656268; margin-top: 15px; font-size:15px;font-weight:lighter"><span class="lastHangout"></span></div>
            <div style="height:140px;margin-top:35px;"><img class="photo transitionButton" src="" alt="No photo available" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#editConnection" style="cursor:pointer; width:120px;height:120px;border-radius:50%;"> </div>
            <div style="font-size:15px;color:#656268"><span class="nextHangout"></span></div>
            <select name="tags" id="tokenize" multiple="multiple" class="modalTokenBox" href="<%= update_tags_path %>" data-method="PUT">
            </select>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereBlueBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#makePlan">MAKE PLANS</div>
            <div id="checkinButton" class="modalBottomRightButton <%= if (@setting_for_activity_entry_details && @setting_for_activity_entry_details.value_in_specified_type > 1); "transitionButton" else "ajaxButton createActivity"  end  %> sphereGreenBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#detailedCheckIn" data-method="POST" href="<%= create_activity_path %>"  <%= if !(@setting_for_activity_entry_details && @setting_for_activity_entry_details.value_in_specified_type > 1); "data-data-to-send=({activity_definition_id:#{@activity_definitions.take.id}})" end %> >CHECK IN</div>
        </div>
    </div>
    <% if @activity_definitions %>
        <div class="modalView" id="detailedCheckIn">
            <div class="modalContentContainer">
                <ul>
                    <% @activity_definitions.each do |activity_definition| %>
                        <li>
                            <div class="checkInButton ajaxButton createActivity" data-data-to-send="({activity_definition_id:<%= activity_definition.id %>})" href="<%= create_activity_path %>" data-method="POST" >
                                <%= activity_definition.activity.capitalize %>
                            </div>
                        </li>
                    <% end %>
                </ul>
            </div>
            <div class="modalButtonContainer">
                <div class="modalBottomFullButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#detailedCheckIn" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            </div>            
        </div>
    <% end %>
    <div class="modalView hidden" id="makePlan">
        <div class="modalContentContainer p-h-xxlg">
            <span class="textDarkGray">Event info</span>
            <form action="<%= plans_path %>" method="POST" >
                <input type="date" class="formElement button m-b-sm m-t-sm" name="date" placeholder="Which day" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" />
                <input type="text" class="formElement m-b-sm" name="time" placeholder="what time (e.g. 12:30pm)" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" required />
                <input type="number" class="formElement m-b-sm" name="duration" placeholder="for how many hours (e.g. 0.5)" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" required />
                <input type="text" class="formElement m-b-sm" name="name" placeholder="meeting/activity name" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" required />
                <input type="text" class="formElement m-b-sm" name="location" placeholder="location (optional)" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" />
                <input type="text" class="formElement m-b-sm" name="details" placeholder="details (optional)" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" />
                <div style="display:inline-box; width:50px; height:20px; border-radius:5px; background-color:yellow" class="hidden" href="<%= cancel_plan_path %>" data-method="PUT" id="deleteEvent" data-alert-element=".modalView#makePlan #makePlanFormAlert">Cancel</div>
                <input type="hidden" name="connection_id">
                <input type="hidden" name="plan_id">
                <%= check_box_tag 'notify',true,@settings[:send_event_booking_notification_by_default], style:"display:inline-box;" %>
                <label for="notify" class="textDarkGray">Send invite?</label>
                <input type="text" class="input-text hidden default_hidden" name="connection_email" data-default-css="([{'attribute':'border','value':'1px solid rgba(0,0,0,0.1)'}])" >
                <div class="alert hidden default_hidden" id="makePlanFormAlert" style="margin-top:1px;line-height:15px;"></div>
            </form>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#makePlan" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable">PUT IN CALENDAR</div>
        </div>
    </div>
    <div class="modalView hidden" id="editConnection">
        <div class="modalContentContainer">
            <form id="connectionInfo">
                <span class="textDarkGray">How often do you want to stay in touch?</span>
                <div class="btn-group contactFrequency" role="group">
                    <button class="btn btn-light-grey btn-secondary" style="width:33%" data-value="weekly">WEEKLY</button>
                    <button class="btn btn-light-grey btn-secondary" style="width:34%" data-value="monthly">MONTHLY</button>
                    <button class="btn btn-light-grey btn-secondary" style="width:33%" data-value="other">OTHER</button>
                </div>
                <div class="details" style="display:none;" >
                    Every <input type="number" name="other_days" id="other_days" size="3" min="1" value="14" data-skip-clear="true" data-default-class=""> days
                </div>

                <input name="photoUploader" id="photoUploader" type="file" accept="image/*">
                <label for="photoUploader" class="textDarkGray">
                    <%= fa_icon 'id-badge' %>
                    Upload Photo
                </label>
                <textarea name="notes" rows="4" placeholder="Notes" class="textDarkGray"></textarea>
                <div class="alert hidden default_hidden" id="connectionFormAlert" style="margin-top:1px;line-height:10px;"></div>
            </form>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#editConnection" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable">Update</div>
        </div>
    </div>
</div>


<div data-remodal-id="importModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="mainImportView">
        <div class="modalContentContainer">
            <div class="addConnectionPopupContent" >
                <div class="formElement button textDarkGray" href="<%= import_connection_path %>" data-method="put" data-data-to-send="({'provider':'google'})" data-alert-element="[data-remodal-id=importModal] .alert" id="importContactsGoogle" > <%= image_tag 'google-logo-small', width: 20 %> Import from Google</div>
                <br>
                <h2 style="width:100%;text-align:center;border-bottom:1px solid #E0E0E0;line-height:0.34em;margin:10px 0 20px;"><span style="font-size:14px;color:#787878;background-color:#f0f0f0;padding:0 19px;background:#FFF;">Or enter manually</span></h2>
                <form action="<%= create_connection_path %>" method="POST">
                    <div class="vex-custom-field-wrapper">
                        <input class="formElement m-b-md" name="name" type="text" placeholder="name" required>
                        <input class="formElement m-b-md" name="email" type="text" placeholder="email" >
                        <textarea class="formElement" name="notes" placeholder="notes" rows="2" required></textarea>
                    </div>
                    <div class="alert hidden default_hidden" id="connectionFormAlert" style="margin-top:1px;line-height:10px;"></div>
                </form>
            </div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomFullButton sphereBlueBackground hoverable">
                <span>Add to Sphere</span>
            </div>
        </div>
    </div>
    <div class="modalView" id="listSelect">
        <div class="modalContentContainer">
            <div id="importContacts">
                <div class="alert hidden default_hidden" id="connectionFormAlert" style="margin-top:1px;line-height:10px;position:absolute;top:0px;left:0px;"></div>
                <input type="text" class="search" placeholder="Search">
                <button class="btn sort" data-sort="name">Sort by Name</button>
                <table id="importSelectionTable">
                    <thead>
                        <th>Import?</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Numbers</th>
                        <th>Other Emails</th>
                    </thead>
                    <tbody class="list">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton sphereRedBackground hoverable">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable" href="<%= create_from_import_path %>" data-method="POST">ADD TO SPHERE</div>
        </div>
    </div>
</div>

<div data-remodal-id="settingsModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="settingsSelect">
        <div class="modalContentContainer">
            <div id="settingsContainer">
                <div >
                    <div id="send_event_booking_notification_by_default_title"></div>
                    <div><input type='checkbox' class="settingInput" name='send_event_booking_notification_by_default' id='send_event_booking_notification_by_default_value' value=''></div>
                </div>
                <div>
                    <div id="share_my_calendar_with_contacts_title"></div>
                    <div><input type='checkbox' class="settingInput" name='share_my_calendar_with_contacts' id='share_my_calendar_with_contacts_value' value=''></div>
                </div>
                <div>
                    <div id="default_contact_interval_in_days_title"></div>
                    <div><input type='number' class="settingInput" name='default_contact_interval_in_days' id='default_contact_interval_in_days_value'></div>
                </div>
                <div>
                    <div id="event_add_granularity_title"></div>
                    <div>
                        <select class="settingInput" name='event_add_granularity'>
                            <option value='detailed' id="event_add_granularity_detailed_value">Detailed</option>
                            <option value='quick' id="event_add_granularity_quick_value" >Quick</option>
                        </select>
                    </div>
                </div>                
            </div>
            <div class="alert hidden default_hidden"></div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton sphereRedBackground hoverable">Cancel</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable" href="<%= update_user_settings_path(current_user) %>" data-method="PUT" data-alert-element=".modalView#settingsSelect .alert">Update</div>
        </div>
    </div>
</div>


<%= link_to 'Logout', logout_path %>