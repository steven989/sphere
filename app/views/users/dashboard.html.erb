<script>
var test;
$(function(){
    $('[data-toggle="tooltip"]').tooltip({container: '.buttonGroupWithOther.chooseActivity'});;
    var returnedData;
    var modalInstance;
    var closeModalTimer;    
    var token;
    var tokenInCreate;
    var userLevelNotifications = (<%= raw @notifications %>).user_level;
    var bubblesData = <%= raw @raw_bubbles_data %>;
    test = bubblesData;
    var authorized_google_contacts = <%= @authorized_google_contacts %>;
    var authorized_google_calendar = <%= @authorized_google_calendar %>;
    var openBubble;
    var overLayHtml;

    // Search 
    var options = {
      shouldSort: true,
      matchAllTokens: true,
      findAllMatches: true,
      threshold: 0.2,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [
        "display",
        "email",
        "tags"
        ]
    };
    var fuse = new Fuse(bubblesData, options);
    function searchBarListener() {

        $('#searchBar input').off("focus").on("focus",function(){
            $('#searchBar .result, #searchBar .speechBubbleThingy').each(function(){
                $(this).removeClass('hidden');
            });

            $('#searchBar').on('click',function(){
                event.stopPropagation();
            });

            $('.topTabsContent,.topTabs-header.clearfix').off("click").on("click",function(){

                    $('#searchBar .result, #searchBar .speechBubbleThingy').each(function(){
                        $(this).removeClass('hidden').addClass('hidden');
                    });            
            })

        });

        $('#searchBar input').off("input").on("input",function(){
            if ($(this).val()=="") {
                $('#searchBar .result ul').empty();
                $('#searchBar .result ul').append("<li class='item'><span class='email'>Search connection by name, email or, tags</span></li>");
            } else {
                var result = fuse.search($(this).val());
                $('#searchBar .result ul').empty();
                if (result.length > 0) {
                    result.forEach(function(connection){
                        $('#searchBar .result ul').append("<li class='item' data-bubble-id='connectionBubble"+connection.id+"'><span class='name'>"+connection.display+(connection.email ? "</span><br><span class='email'>"+connection.email : "")+(connection.tags ? "</span><br><span class='tags'>"+connection.tags.join(', ') : "")+"</span></li>");
                    });
                    $('#searchBar .result .item').off("click").on("click",function(){
                        $($("#"+$(this).data('bubble-id'))).trigger('click');
                    $('#searchBar .result, #searchBar .speechBubbleThingy').each(function(){
                        $(this).removeClass('hidden')});
                    });
                    $('#searchBar .result .item').hover(function(){
                        $($("#"+$(this).data('bubble-id'))).removeClass('glowBlue').addClass('glowBlue');
                    },function(){
                        $($("#"+$(this).data('bubble-id'))).removeClass('glowBlue');
                    });
                } else {
                    $('#searchBar .result ul').append("<li class='item'><span class='tags'>No connection found</span></li>");
                }                
            }

        });
    }
    searchBarListener();

    function updateBubblesData(data) {
        bubblesData = data;
        fuse = new Fuse(bubblesData, options);
    }

    // In place update
    function inPlaceUpdate() {
        $('.inPlaceField').each(function(){
            var currentValue;
            $(this).off("focusin").on("focusin",function(){
                currentValue = $(this).val();
            });

            $(this).off("focusout").on("focusout",function(){
                if ($(this).val() != currentValue) {
                    buttonAjax($(this),{id:$(this).data('id'),value:$(this).val()});    
                }
            });
        })
    }
    inPlaceUpdate();

    // User-level notifications
    function showUserLevelNotifications() {
        if (userLevelNotifications != undefined && userLevelNotifications instanceof Array && userLevelNotifications.length > 0) {
            userLevelNotifications.forEach(function(notification){
                var domElements = $('.userLevelNotificationDisplayElement#'+notification.notification_type);
                if (notification.notification_type == "level_up") {
                    var backgroundColor = "#ED1C24";
                    var content = '<%= fa_icon 'thumbs-up', style:'font-size:13px;color:#FFFFFF' %>';
                } else if (notification.notification_type == "new_challenge") {
                    var backgroundColor = "#ED1C24";
                    var content = "<span style='font-size:13px;color:#FFFFFF'>"+notification.count+"</span>";
                } else if (notification.notification_type == "new_badge") {
                    var backgroundColor = "#ED1C24";
                    var content = "<span style='font-size:13px;color:#FFFFFF'>"+notification.count+"</span>";
                }
                domElements.each(function(){
                    var coordinates = getNotificationCoordinate(5,$(this).closest('.notificationContainer').width()/2-20,14);
                    $(this).closest('.notificationContainer').append('<span class="badge" style="width:20px; height:20px;position:absolute;background-color:'+backgroundColor+';left:'+coordinates.x+'px;bottom:'+coordinates.y+'px;padding-top:0px;">'+content+'</span>')
                })
            });
        }
    }
    showUserLevelNotifications();

    var allTags = <%= raw @all_tags %>;
    toastr.options.newestOnTop = true;

    // Navigation bar related
    $('#settingLogoutToggle').off("click").on("click",function(){
        $('.profileButtonsContainer.hideOnMobile').toggle();
    });

    // Paint the bubbles
    paintBubbles(<%= raw @raw_bubbles_data %>,<%= raw @notifications %>,<%= raw @bubbles_parameters %>,prettifyBubbles);

    function paintBubbles(raw_bubbles_data,notifications,bubbles_parameters,callback) {
        $('#canvas').bubblify(raw_bubbles_data,notifications,bubbles_parameters,callback);
    }
    
    function prettifyBubbles(canvas,notifications){
        canvas.find('.connectionBubble').each(function(){

            // 1) Notifications
                if (connectionNotification = notifications["connection_level"] && notifications["connection_level"][$(this).data('connection-id')]) {
                    // 1.1)Progress bar
                    if (connectionNotification["notification_type"] == "connection_expiration") {
                        var remaining_days_until_expiry = connectionNotification["value"]["remaining_days_until_expiry"];
                        var percentageValueOfRemainingDays = Math.max(Math.min(remaining_days_until_expiry*1.0/7.0,1),0.2);
                        
                        paintProgressBar($(this).parent('.connectBubbleContainer'),1,"#ED1C24",percentageValueOfRemainingDays);

                    }
                    // 1.2) Notification icons
                    var backgroundColor;
                    var content;
                    if (connectionNotification["notification_type"] == "connection_expiration") {
                        backgroundColor = "#ED1C24";
                        content = connectionNotification["value"]["remaining_days_until_expiry"]+"d";
                    } else if (connectionNotification["notification_type"] == "checked_in") {
                        backgroundColor = "#34BF49";
                        content = '<%= fa_icon 'check' %>';
                    } else if (connectionNotification["notification_type"] == "upcoming_plan") {
                        backgroundColor = "#FFB900";
                        content = '<%= fa_icon 'calendar' %>';
                    }
                    var coordinates = getNotificationCoordinate(325,$(this).parent('.connectBubbleContainer').width()/2,14);
                    $(this).parent('.connectBubbleContainer').append('<span class="badge" style="width:22px; height:22px; position:absolute;background-color:'+backgroundColor+';left:'+coordinates.x+'px;bottom:'+coordinates.y+'px;font-size:13px;padding-top:1px;">'+content+'</span>');
                } else {
                    $(this).parent('.connectBubbleContainer').find('.badge').remove();
                }

            // 2) Set some attributes
            if ($(this).data('connection-id')=='0') {
                $(this).attr('href',"<%= get_user_info_path %>");
                $(this).data('method','get');                
            } else {
                $(this).attr('href',"<%= populate_connection_modal_path %>?connection_id="+$(this).data('connection-id'));
                $(this).data('method','get');
            }

            // 3) Modal on clicking each bubble
            $(this).off("click").on("click",function(){
                if (!$(this).hasClass('disabled')) {
                    overLayHtml = $(this).find('.overlayWithName span').html();
                    openBubble = $(this);
                    $(this).find('.overlayWithName span').html('<%= fa_icon "spinner", class:"rotater" %>');
                    $(this).find('.overlayWithName').css({'opacity':'1'});
                    clockedRotate.start($(this).find('.overlayWithName span .rotater'),150,true);
                    var _this = $(this);
                    if (_this.data('connection-id')=='0') {
                        resetModal($('[data-remodal-id=bubbleModal]'),1);
                        buttonAjax(_this,{});
                    } else {
                        $('[data-remodal-id=bubbleModal] .modalView').each(function(){
                            if ($(this).prop('id') != 'plans') {$(this).removeClass('hidden').addClass('hidden')}
                                else {$(this).removeClass('hidden')};
                        });
                        $('[data-remodal-id=bubbleModal]').data("connection-id",_this.data('connection-id'));
                        $('.modalView#makePlan input[name=connection_id]').val(_this.data('connection-id'));
                        $('.modalView#makePlan input[name=connection_email]').prop('placeholder',"Type "+_this.data("first-name")+"'s email");
                        $('.createActivity').each(function(){
                            $(this).attr("href","<%= create_activity_path %>?connection_id="+_this.data('connection-id'));
                        });
                        $('.modalView#editConnection .modalBottomRightButton').off('click').on('click',function(){
                            var button = $(this);
                            if (!button.hasClass('disabled')) {
                                var disabledButtonObject = disableButtonIfSpecifiedInClassName(button);                    
                                var formData = new FormData();
                                var form = $('.modalView#editConnection form');
                                var frequency = form.find('.contactFrequency button').filter(function(){return $(this).hasClass("active") }).data('value');
                                var custom_frequency;
                                formData.append("connection_id",_this.data('connection-id'));
                                if (frequency=="other") { custom_frequency = form.find('.details input').val();}
                                formData.append("contact_frequency",frequency);
                                formData.append("custom_frequency",custom_frequency);
                                formData.append("notes",form.find('[name=notes]').val());
                                formData.append("photo", $('.modalView#editConnection #photoUploader').prop("files")[0]);

                              $.ajax({
                                url: '<%= update_connection_path %>',
                                type: 'PUT',
                                processData: false,
                                contentType: false,
                                data: formData,
                                dataType: 'JSON'
                              }).done(function(data){
                                    if (data.status) {
                                            if(data.message != undefined){
                                                toastr.success(data.message,null,{timeOut: 5000,closeButton:false});                       
                                            }
                                    } else {
                                        toastr.options.closeButton = true;
                                        if(data.message != undefined /* && alertElement.length > 0 */) {
                                            toastr.error(data.message,null, {timeOut: 10000,closeButton:true});
                                        }
                                    }
                                    if (data.data != undefined) {
                                        returnedData = data.data;
                                    }
                                    reEnableButton(disabledButtonObject);
                                    if (data.actions != undefined && data.actions.length > 0) {
                                        performActions(data.actions);    
                                    }
                                  });
                            }
                        })
                        resetModal($('[data-remodal-id=bubbleModal]'),3);
                        buttonAjax(_this,{});
                    } // if (_this.data('connection-id')=='0')
                } //if (!button.hasClass('disabled'))
            }); // $(this).off("click").on("click")
        });
    }

    function stopBubbleLoadingScreen() {
        openBubble.find('.overlayWithName span').html(overLayHtml);
        openBubble.find('.overlayWithName').css({'opacity':''});
        clockedRotate.end();
    }

    // open modal instance
    function initializeReModal(element,modifier,resetType) {
        if(!modalInstance || modalInstance.state != "opened") {
            modalInstance = $(element).remodal({
            closeOnConfirm:false,
            modifier:modifier
            });
            resetModal($(element),resetType);
            clearTimeout(closeModalTimer);
            modalInstance.open();
        }
    }

    // close modal instance 
    function closeModalInstance(timer) {
        if (modalInstance.state=="opened") {
            closeModalTimer = setTimeout(function(){
                                modalInstance.close();

                              },timer);
        }
    }

    // function to continuously rotate an element
    var clockedRotate = {
        rotater:null,
        degree:0,
        start:function(element,period,clockWise){
            clockedRotate.rotater = setInterval(function(){
                element.css({'transform':'rotate('+((clockedRotate.degree*45)%360).toString()+'deg)'});
                if (clockWise) {
                    clockedRotate.degree = clockedRotate.degree+1;
                } else {
                    clockedRotate.degree = clockedRotate.degree-1;
                }
            },period);
        },
        end:function(){
            clearInterval(clockedRotate.rotater);
            clockedRotate.rotater = null;
        }
    };

    // Photo upload label within bubble modal to change display when a file is selected
    $(".hiddenUploader").on("change",function(){
            $("label[for="+$(this).prop('id')+"]").html($(this).prop("files")[0].name);
    });

    // tokenize the tagging in create contact modal (this is not the edit contact modal)
    createTagginInCreate();
    function createTagginInCreate() {
        if ((typeof tokenInCreate == "undefined")) {
             tokenInCreate = $('.modalView#mainImportView #tokenizeInCreate').tokenize({
                autosize:true,
            }); 
        }
        tokenInCreate.clear();
        tokenInCreate.tokenAdd("$add$tag$","+ Add Tags");
        $('.modalTokenBox ul.TokensContainer li.Token span').css("margin-right","10px");
        $('.modalView#mainImportView .modalTokenBox li.Token a').remove();

        $('.modalView#mainImportView .modalTokenBox li.TokenSearch input').off('focusin').on('focusin',function(){
            tokenInCreate.tokenRemove("$add$tag$");
        });

        $('.modalView#mainImportView .modalTokenBox li.TokenSearch input').off('focusout').on('focusout',function(){

            if (tokenInCreate.toArray().length == 0) {
                tokenInCreate.tokenAdd("$add$tag$","+ Add Tags");
                $('.modalView#mainImportView .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('span').css("margin-right","10px");
                $('.modalView#mainImportView .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('a').remove();                
            }
        });
        tokenizeTagInCreateContactSelectionField();
    }
    
    function tokenizeTagInCreateContactSelectionField() {
        $('.modalView#mainImportView #tokenizeInCreate').html("");
        allTags.forEach(function(tag){
            $('.modalView#mainImportView #tokenizeInCreate').append("<option value="+tag+">"+tag+"</option>")
        }); 
    }

    // Modal resets
    function resetModal(modal,resetType) {
        if (resetType == 1 || resetType == 3) {
            // reset class
            if (modal.data('default-css')){
                eval(modal.data('default-css')).forEach(function(cssReset){ 
                    modal.css(cssReset.attribute,cssReset.value);
                });                
            }
            modal.find('*').filter(function(){ return $(this).data('default-class') != undefined }).each(function(){
                $(this).prop("class",$(this).data('default-class'));
            })
            // Reset css
            modal.find('*').filter(function(){
                return $(this).data('default-css') != undefined;
            }).each(function(){
                var _this = $(this); 
                eval($(this).data('default-css')).forEach(function(cssReset){ 
                    _this.css(cssReset.attribute,cssReset.value);
                });
            });

            // Reset the fields that should be hidden by default
            modal.find('.default_hidden').each(function(){
                $(this).removeClass('hidden').addClass('hidden');
            });
        }

        if (resetType == 2 || resetType == 3) { 
            // Reset values
            modal.find('input').each(function(){
                if($(this).prop('type') != 'hidden' && $(this).prop('type') != 'checkbox' && $(this).data('skip-clear') == undefined ) {
                    $(this).val('');
                }
            });
            modal.find('.clearInputAfterUpdate').each(function(){
                if($(this).hasClass('tokenized')) {
                    if (eval($(this).data('token-variable'))) {
                        eval($(this).data('token-variable')).clear();
                    }
                } else if($(this).prop('value') == undefined) {
                    if($(this).data('default-value') == undefined) {
                        $(this).html("");
                    } else {
                        $(this).html($(this).data('default-value'));
                    }
                } else {
                    if($(this).data('default-value') == undefined) {
                        $(this).val('');
                    } else {
                        $(this).val($(this).data('default-value'));
                    }
                }
            })
        }

    }

    function disableButtonIfSpecifiedInClassName(button){
        var current_html = button.html();
        var current_value = button.val();
        var status = true;
        if (button.hasClass('disableWhileProcessed')) {
            button.removeClass('disabled').addClass('disabled');
            button.html('<span class=\'rotater\' style=\'display:inline-block;\'><%= fa_icon 'spinner' %></span>');
            clockedRotate.start(button.find('.rotater'),150,true);
            button.val("Wait...");
            status = false;
        }
        return {button:button,status:status,current_html:current_html,current_value:current_value};
    }

    function reEnableButton(disabledButtonObject){
        var button = disabledButtonObject.button;
        if (button.hasClass('disableWhileProcessed') && button.hasClass('disabled') && !button.hasClass('doNotReenable') ) {
            button.removeClass('disabled');
            button.html(disabledButtonObject.current_html);
            button.val(disabledButtonObject.current_value);
            clockedRotate.end();
        }
        return button;
    }

    // General modal ajax submission function
    function modalAjaxFormSubmission(form,submissionButton) {
        var button = submissionButton;
        if (!button.hasClass('disabled')) {
            var disabledButtonObject = disableButtonIfSpecifiedInClassName(button);
            var formData = new FormData();
            form.find('.inputData').each(function(){
                if ($(this).prop('type') == 'checkbox') {
                    formData.append($(this).prop('name'),$(this).prop('checked'));
                } else if ($(this).prop('type') == 'file') {
                    formData.append($(this).prop('name'),$(this).prop("files")[0]);
                } else if ($(this).prop('tagName') == 'SELECT') {
                    if($(this).hasClass('tokenized')) {
                        var tokenVariable = eval($(this).data('token-variable')).toArray();
                        formData.append($(this).prop('name'),JSON.stringify(tokenVariable));
                    } else {
                        formData.append($(this).prop('name'),$(this).val());    
                    }
                } else {
                    formData.append($(this).prop('name'),$(this).val());
                }
            });

          $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            processData: false,
            contentType: false,
            data: formData,
            dataType: 'JSON'
          }).done(function(data){
                resetModal(form.closest('.remodal'),1);
                if (data.status) {
                        if(data.message != undefined /* && alertElement.length > 0 */ ) {
                            toastr.success(data.message,null, {timeOut: 5000,closeButton:false});
                        }
                } else {
                        toastr.options.closeButton = true;
                        if(data.message != undefined /* && alertElement.length > 0 */) {
                            toastr.error(data.message,null, {timeOut: 10000,closeButton:true});
                        }
                }
                if (data.data != undefined) {
                    returnedData = data.data;
                }
                if (data.actions != undefined && data.actions.length > 0) {
                    performActions(data.actions);
                }
                reEnableButton(disabledButtonObject);
              });
        }   
    }

    // General listener for submit buttons
    function submitButtonListener() {
        $('.submitButton').each(function(){
            $(this).off("click").on("click",function(){
                var button = $(this);
                var form = $($(this).data('submit-form'));
                modalAjaxFormSubmission(form,button);
            });
        });        
    }
    submitButtonListener();



    $('#addConnection').off('click').on('click',function(){
        initializeReModal('[data-remodal-id=importModal]','standardModal',1);
    });

    $('#navigation-tabs-container').easytabs({
        updateHash: false,
        tabs: "ul.etabs > li",
        animate: true,
        transitionIn: 'fadeIn',
        transitionOut: 'fadeOut',
        updateHash: true
    });


    function getNotificationCoordinate(angleInDegrees,attacheeRadiusInPixels,selfRadiusInPixels) {
        var x = Math.cos(angleInDegrees*(Math.PI/180))*attacheeRadiusInPixels + attacheeRadiusInPixels - selfRadiusInPixels;
        var y = Math.sin(angleInDegrees*(Math.PI/180))*attacheeRadiusInPixels + attacheeRadiusInPixels - selfRadiusInPixels;
        return {x:x,y:y};
    }

    // learn button on the challenge cards
    $('#challenges .challengeCard .buttons .modalBottomRightButton').off("click").on("click",function(){
        $('[data-remodal-id=challengeDetailsModal] .modalView#challengeDetails .modalContentContainer').html($.parseHTML($(this).data('details')));
            initializeReModal('[data-remodal-id=challengeDetailsModal]','standardModal',3);
    });

    // Related to the challenge cards

    function afterStart(card) {
        // update the data attributes
        var daysRemaining = returnedData.days_remaining;
        var status = returnedData.status;
        card.data('days-remaining',daysRemaining).data('status',status);
        // change the buttons
        transition(card.find('.buttons .start'),card.find('.buttons .complete'));
        // paint the progress bar
        displayProgressBarOnChallengeCard (card.find('.graphicWrapper'));
    }

    function afterComplete(card) {
        // fade out and then delete the card element from DOM
        card.fadeOut(600,function(){
            $(this).parent().remove();
        })
    }

    displayProgressBarsOnChallenges();

    function displayProgressBarsOnChallenges() {
        $('.challengeCard .graphicWrapper').each(function(){
            displayProgressBarOnChallengeCard ($(this));
        })  
    }

    function displayProgressBarOnChallengeCard (graphicWrapper) {
        var card = graphicWrapper.closest('.challengeCard')
        if (card.data('status')=="progressing") {
            var totalDays = parseInt(card.data('total-days'));
            var remainingDays = parseInt(card.data('days-remaining'));
            var remainingPercent = remainingDays/totalDays;
            var color = remainingPercent > 0.75 ? '#34BF49' : (remainingPercent > 0.3 ?  '#FFB224' : '#ED1C24');
            var animationStartValue = remainingPercent > 0.95 ? 0 : 1;
            paintProgressBar(graphicWrapper,animationStartValue,color,remainingPercent);
        }
    }


    // General function to paint progress bars

    function paintProgressBar(displayElement,animationStartValue,color,value) {
        displayElement.circleProgress({
            value: value,
            thickness:5,
            lineCap:'round',
            size: displayElement.width(),
            fill: {color: color},
            emptyFill: 'rgba(0,0,0,0)',
            startAngle:(0.5*Math.PI),
            reverse:true,
            animationStartValue: animationStartValue
        });
    }

    // Importing contacts
    $('#importContactsGoogle').off("click").on("click",function(){
        _this = $(this);
        if (!authorized_google_contacts) {
            var url = "<%= Rails.env.production? ? ENV['PRODUCTION_HOST_DOMAIN']+'auth/google_contacts?login_hint='+@current_user_email : 'http://localhost:3000/auth/google_contacts?login_hint='+@current_user_email %>";
            var win = window.open(url,"_blank","width=500,height=600");
            var checkConnect = setInterval(function() {
                    if (!win || !win.closed) return;
                    clearInterval(checkConnect);
                    authorized_google_contacts = true;
                    buttonAjax(_this,_this.data('data-to-send'));
                }, 100);
        } else {
            buttonAjax(_this,_this.data('data-to-send'));
        }
    });

    // Clicking on rows of the import contacts view
    $('#importContacts #importSelectionTable').off("click").on("click",'tr',function(){
        $(this).find('input.importCheck').prop('checked',!$(this).find('input.importCheck').prop('checked'));
    })

    // Putting in calendar
    $('.putInCalendar').off("click").on("click",function(){
        _this = $(this);
        if (!authorized_google_calendar) {
            var url = "<%= Rails.env.production? ? ENV['PRODUCTION_HOST_DOMAIN']+'auth/google_calendar?login_hint='+@current_user_email : 'http://localhost:3000/auth/google_calendar?login_hint='+@current_user_email %>";
            var win = window.open(url,"_blank","width=500,height=600");
            var checkConnect = setInterval(function() {
                    if (!win || !win.closed) return;
                    clearInterval(checkConnect);
                    authorized_google_calendar = true;
                    modalAjaxFormSubmission($(_this.data('submit-form')),_this);
                }, 100);
        } else {
            modalAjaxFormSubmission($(_this.data('submit-form')),_this);
        }
    });


    function changeVariableValue(variable,value) {
        eval(variable+"="+value);
    }

    // Account settings
    $('#accountSettings').off("click").on("click",function(){
        buttonAjax($(this),{});
    });

    $('.modalView#settingsSelect .modalBottomRightButton').off("click").on("click",function(){
        var dataObject = {}
        $('.settingInput').each(function(){
            if ($(this).prop('type') == "checkbox") {
                dataObject[$(this).prop('name')] = $(this).prop('checked');
            } else if ($(this).prop('type') == 'select-one') {
                dataObject[$(this).prop('name')] = $(this).find('option:selected').val();
            } else {
                dataObject[$(this).prop('name')] = $(this).val();
            }
        })

        var dataToSend = {data:dataObject};
        buttonAjax($(this),dataToSend);
    });

    // Generic listener for ajax-enabled buttons

    function ajaxButtonListener(element) {
        if (element == null) {
            $('.ajaxButton').each(function(){
                $(this).off("click").on("click",function(){
                    buttonAjax($(this),$(this).data('data-to-send'));
                });
            });
        } else {
            $(element).off("click").on("click",function(){
                buttonAjax($(this),$(this).data('data-to-send'));
            });
        }
    }
    ajaxButtonListener(null);

    // Standard ajax call for buttons
    function buttonAjax(button,data) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();            
        }
        if (!button.hasClass('disabled')) {
          var disabledButtonObject = disableButtonIfSpecifiedInClassName(button);
          $.ajax({
            url: button.attr('href'),
            type: button.data('method'),
            data: eval(data),
            dataType: 'JSON'
          }).done(function(data){
                if (data.status) {
                        if(data.message != undefined /* && alertElement.length > 0 */ ) {
                            toastr.success(data.message,null, {timeOut: 3000,closeButton:false});
                        }
                } else {
                    toastr.options.closeButton = true;

                    if(data.message != undefined /* && alertElement.length > 0 */) {
                        toastr.error(data.message,null, {timeOut: 6000,closeButton:true});
                    }
                }
                if (data.data != undefined) {
                    returnedData = data.data;
                }
                if (data.actions != undefined && data.actions.length > 0) {
                    performActions(data.actions);    
                }
                reEnableButton(disabledButtonObject);
          })            
        }
    }


    // Specific callback functions for after modal population
    function populateBubblesModal() {
        // Main screen
        var name = returnedData.name;
        var lastHangout = returnedData.lastPlanString;
        var nextHangout = returnedData.upcomingPlanString;
        var photoUrl = returnedData.photo;
        var email = returnedData.email;
        allTags = returnedData.all_tags;
        var connectionTags = returnedData.connection_tags;
        var notes = returnedData.notes;
        var contact_frequency = returnedData.contact_frequency;
        var target_contact_interval_in_days = returnedData.target_contact_interval_in_days;

        $('#destroy_single_connection').attr('href',"<%= destroy_connection_path %>"+"?connection_id="+returnedData.connection_id);
        $('[data-remodal-id=bubbleModal] .modalView#plans input.name').val(name).data('id',returnedData.connection_id);
        $('[data-remodal-id=bubbleModal] .modalView#plans input.email').val(email).data('id',returnedData.connection_id);
        $('[data-remodal-id=bubbleModal] .modalView#plans span.lastHangout').html(lastHangout);
        if (photoUrl) {
            $('[data-remodal-id=bubbleModal] .modalView#plans div.photo').removeClass('hidden');
            $('[data-remodal-id=bubbleModal] .modalView#plans div.icon').removeClass('hidden').addClass('hidden');
            $('[data-remodal-id=bubbleModal] .modalView#plans div.photo').css({'background-image':'url('+photoUrl+')','background-size':'cover','background-position':'center','background-repeat':'no-repeat','background-color':'#EFEFEF'});
        } else {
            $('[data-remodal-id=bubbleModal] .modalView#plans div.icon').removeClass('hidden');
            $('[data-remodal-id=bubbleModal] .modalView#plans div.photo').removeClass('hidden').addClass('hidden');
        }

        $('.modalView#makePlan label[for=notify]').html("Send invite to "+name.split(" ")[0]+"?");
        $('.modalView#makePlan input[name=notify]').prop('checked',<%= @settings[:send_event_booking_notification_by_default] %>);
        $('[data-remodal-id=bubbleModal] .modalView#plans span.nextHangout').html(nextHangout);
        if (returnedData.hasUpcomingPlan) {
            $('.modalView#makePlan input[name=date]').val(returnedData.planData.date);
            $('.modalView#makePlan input[name=timeFrom]').val(returnedData.planData.start_time);
            $('.modalView#makePlan input[name=timeTo]').val(returnedData.planData.end_time);
            $('.modalView#makePlan input[name=name]').val(returnedData.planData.name);
            $('.modalView#makePlan input[name=location]').val(returnedData.planData.location);
            $('.modalView#makePlan input[name=details]').val(returnedData.planData.details);
            $('.modalView#makePlan input[name=plan_id]').val(returnedData.planData.id);
            $('.modalView#makePlan input[name=notify]').prop('checked',returnedData.planData.notify);
            // ----- this part adds the green selected highlight to the activities button group based on text //
            var selectedActivities = 0;
            $('.modalView#makePlan .chooseActivity button').each(function(){
                if($(this).data('value')==returnedData.planData.name) {
                    $(this).removeClass('active').addClass('active');
                    selectedActivities++;
                } else {
                    $(this).removeClass('active');
                    if ($(this).data('value') == 'other' && selectedActivities == 0){
                        $(this).addClass('active');
                        $($(this).data('slide-down')).slideDown();
                    }
                }
            });
            // ------ Make the delete event button visible if there's already a plan
            $('.modalView#makePlan div#deleteEvent').removeClass('hidden');
            $('.modalView#makePlan div#deleteEvent').off('click').on('click',function(){
                buttonAjax($(this),{plan_id:returnedData.planData.id,notify:$('.modalView#makePlan #notify').prop('checked')});
            });
            // ------ Update the label for the notify checkbox
            $('.modalView#makePlan label[for=notify]').html("Send update to "+name.split(" ")[0]+"?");
            // ------ Change the modal button properties
            $('.modalView#makePlan form').attr('action',"<%= modify_plan_path %>").attr('method','PUT');
            $('.modalView#makePlan .modalBottomRightButton').html("UPDATE");
            $('.modalView#plans .modalBottomLeftButton').html("RESCHEDULE");
            // ------ Update the google calendar authorization status
            var authorized_by_google_calendar = returnedData.authorized_by_google_calendar == "true" ? true : false;
            
            submitButtonListener();
        } else {
            $('.modalView#makePlan div#deleteEvent').removeClass('hidden').addClass('hidden');
            $('.modalView#makePlan form').attr('action',"<%= plans_path %>").attr('method','POST');
            submitButtonListener();
            $('.modalView#makePlan .modalBottomRightButton').html("PUT IN CALENDAR");
            $('.modalView#plans .modalBottomLeftButton').html("MAKE PLANS");
        }

        // Related to the tagging field in the modal. Used jQuery Tokenize plugin, but made slight modifications to the plugin so that upon clearing all tokens it doesn't trigger the callbacks that is triggered for one-by-one removing token
         if ((typeof token == "undefined")) {
             token = $('.modalView#plans #tokenize').tokenize({
                autosize:true,
                onAddToken:function(){
                    var idReference = returnedData;
                    if (!isSubset(token.toArray(),idReference.connection_tags,["$add$tag$"],[])) { // if the new array is NOT a subset of the old array, then update the backend
                        buttonAjax($('.modalView#plans #tokenize'),{connection_id:idReference.connection_id,tags:token.toArray().filter(function(el){return el != "$add$tag$"})});
                    }
                },
                onRemoveToken:function() {
                    var idReference = returnedData;
                    if (!isSubset(idReference.connection_tags,token.toArray(),[],["$add$tag$"])) { // if the old array is NOT a subset of the new array, then update the backend
                        buttonAjax($('.modalView#plans #tokenize'),{connection_id:idReference.connection_id,tags:token.toArray().filter(function(el){return el != "$add$tag$"})});
                    }
                }
            });            
         }
         token.clear();
        $('.modalView#plans #tokenize').html("");
        allTags.forEach(function(tag){
            $('.modalView#plans #tokenize').append("<option value=\""+tag+"\">"+tag+"</option>")
        });
        tokenizeTagInCreateContactSelectionField();

        $('.modalView#plans .modalTokenBox li.TokenSearch input').off('focusin').on('focusin',function(){
            token.tokenRemove("$add$tag$");
        });
        $('.modalView#plans .modalTokenBox li.TokenSearch input').off('focusout').on('focusout',function(){

            if (token.toArray().length == 0) {
                token.tokenAdd("$add$tag$","+ Add Tags");
                $('.modalView#plans .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('span').css("margin-right","10px");
                $('.modalView#plans .modalTokenBox li').filter(function(){return $(this).data('value') == "$add$tag$"}).find('a').remove();                
            }
        })
        
        if (connectionTags.length == 0) {
            token.tokenAdd("$add$tag$","+ Add Tags");
            $('.modalTokenBox ul.TokensContainer li.Token span').css("margin-right","10px");
            $('.modalView#plans .modalTokenBox li.Token a').remove();
        } else {
            connectionTags.forEach(function(tag){
                token.tokenAdd(tag,tag);
            });
        }
        // Related to the preferences view

        if (["monthly","weekly","other"].indexOf(contact_frequency) == -1) {
            contact_frequency = "monthly"; // Default to monthly
        } 

        $('.modalView#editConnection form [name=notes]').val(notes);
        if (target_contact_interval_in_days != undefined && target_contact_interval_in_days != "undefined" && target_contact_interval_in_days > 0) {$('.modalView#editConnection form .details input').val(target_contact_interval_in_days);}
        if (contact_frequency == "other") {
            $('.modalView#editConnection form .details').slideDown();
        } else {
            $('.modalView#editConnection form .details').css("display","none");
        }

        // related to the monthly, weekly and other contact frequency button group
        $('.modalView#editConnection .contactFrequency button').each(function(){
            if ($(this).data('value') == contact_frequency) {
                $(this).removeClass('active').addClass('active');
            } else {
                $(this).removeClass('active');
            }
        }) 
        // related to scheduling activities select button group
        $('.modalView#makePlan .chooseActivity button').each(function(){
            $(this).on("click",function(){
                if ($(this).data('value') != "other") {
                    $($(this).data('slide-down')+' input').val($(this).data('value'));
                }                
            });
        });

        // Related to the date and time pickers in the scheduling events modal view
        $('#scheduleDatePicker').datepicker({
            dateFormat: "yy-mm-dd",
            minDate: new Date('<%= Date.today %>'),
            onSelect: function(){
                $('#scheduleTimeFrom').focus();
            }
        });

        $('#scheduleTimeFrom').timepicker({'scrollDefault':'7:00am'});
        $('#scheduleTimeFrom').on('changeTime',function(){
            $('#scheduleTimeTo').val($(this).val());
            $('#scheduleTimeTo').timepicker({
                'scrollDefault':'7:00am',
                'disableTimeRanges': [['12am',$(this).val()]]
            });
            $('#scheduleTimeTo').focus();

        });
        $('#scheduleTimeTo').timepicker({'scrollDefault':'7:00am'});
        $('#scheduleTimeTo').on('changeTime',function(){
            setTimeout(function(){
                        $('#scheduleLocation').focus();
                    },100);
        });
    }

    buttonGroupWithOther();
    function buttonGroupWithOther() {
        $('.buttonGroupWithOther button').each(function(){
            $(this).off("click").on("click",function(){
                event.preventDefault();
                event.stopPropagation();
                $(this).siblings().each(function(){
                    $(this).removeClass('active');
                })
                if($(this).data('value') == "other") {
                    $($(this).data('slide-down')).slideDown();
                } else {
                    $($(this).data('slide-down')).slideUp();
                }
                $(this).removeClass('active').addClass('active');
            })
        })        
    }

    function populateUserInfoForm() {
        $('.modalView#userInfo input[name=firstName]').val(returnedData.first_name);
        $('.modalView#userInfo input[name=lastName]').val(returnedData.last_name);
        $('.modalView#userInfo input[name=phoneNumber]').val(returnedData.phone);
    }

    function populateSettingsForm () {

        var form = $('.modalView#settingsSelect #settingsContainer');
        form.find('#send_event_booking_notification_by_default_title').html(returnedData.send_event_booking_notification_by_default.title);
        form.find('#send_event_booking_notification_by_default_value').prop('checked',returnedData.send_event_booking_notification_by_default.value);
        form.find('#share_my_calendar_with_contacts_title').html(returnedData.share_my_calendar_with_contacts.title);
        form.find('#share_my_calendar_with_contacts_value').prop('checked',returnedData.share_my_calendar_with_contacts.value);
        form.find('#default_contact_interval_in_days_title').html(returnedData.default_contact_interval_in_days.title);
        form.find('#default_contact_interval_in_days_value').val(returnedData.default_contact_interval_in_days.value);
        form.find('#event_add_granularity_title').html(returnedData.event_add_granularity.title);
        form.find('#event_add_granularity_detailed_value').prop("selected", (returnedData.event_add_granularity.value == 'detailed'));
        form.find('#event_add_granularity_quick_value').prop("selected", (returnedData.event_add_granularity.value == 'quick'));

        initializeReModal("[data-remodal-id=settingsModal]","standardModal",1);
    }

    function putWordsBackInIfNoExpiredConnection(timer) {
            setTimeout(function(){
                $('.modalView#expiredConnections .modalContentContainer').append("<span style='display:block;' class='textDarkGray m-b-md'>No expired connections. Keep it up!</span>");},timer);
        
    }

    function populateExpiredConnections() {
        var expiredConnections = returnedData;
        $('.modalView#expiredConnections .modalContentContainer').html("<span style='display:block;' class='textDarkGray m-b-md'>Lost Connections</span>");
        if (expiredConnections.length == 0) {
            putWordsBackInIfNoExpiredConnection(0);
        } else {
            expiredConnections.forEach(function(connection){
                $('.modalView#expiredConnections .modalContentContainer').append('<div class="row m-b-md" id="expiredConnectionRow'+connection.id+'"><div class="col-lg-3 col-md-3 col-sm-3 col-xs-4">'+(connection.photo_url ? ('<div class="photo" style="background-image: url(\''+encodeURI(connection.photo_url)+'\');"></div>') : ('<div class="icon textLightGray"><%= fa_icon "user-circle" %></div>'))+'</div><div class="col-lg-9 col-md-9 col-sm-9 col-xs-8 detailsContainer"><div class="row"><div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 texts"><span class="name textDarkGray">'+connection.display+'</span><br><span class="expiredAt textDarkGray">Expired on '+connection.date_inactive+'</span></div><div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 buttonContainer"><div class="formElement button textDarkGray ajaxButton disableWhileProcessed" href="<%= revive_expired_connections_path %>" data-method="PUT" id="revive'+connection.id+'" data-data-to-send="({connection_id:'+connection.id+'})" >RESTORE ('+connection.xp_requirements+' XP PENALTY)</div></div></div></div></div>');
                    ajaxButtonListener('.ajaxButton#revive'+connection.id);
            });
        }

        transition($('.modalView#mainImportView'),$('.modalView#expiredConnections'));
    }

    // Predefined set of actions can be called by passing an array of actions into this function. Useful for Rails to call specific follow up actions
    function performActions(actionsArray) {
        actionsArray.forEach(function(actionObject){
            if(actionObject.action=="popup_refresh_main_on_close") {
                var win = window.open(actionObject.url);
            var checkConnect = setInterval(function() {
                    if (!win || !win.closed) return;
                    clearInterval(checkConnect);
                    window.location.reload();
                }, 100);
            } else if (actionObject.action=="hide") {
                $(actionObject.element).removeClass('hidden').addClass('hidden');
            } else if (actionObject.action=="unhide") {
                $(actionObject.element).removeClass('hidden');
            } else if (actionObject.action == "change_css") {
                $(actionObject.element).css(actionObject.css.attribute,actionObject.css.value);
            } else if (actionObject.action == "transitionViews") {
                transition($(actionObject.from),$(actionObject.to));
            } else if (actionObject.action == "function_call") {
                eval(actionObject.function);
            } else if (actionObject.action == "add_class") {
                $(actionObject.element).removeClass(actionObject.class).addClass(actionObject.class);
            } else if (actionObject.action == "remove_class") {
                $(actionObject.element).removeClass(actionObject.class);
            } else if (actionObject.action == "fadeDelete") {
                $(actionObject.element).fadeOut(actionObject.fadeoutTime,function(){
                    $(this).remove();
                });
            }
        });
    }
    // Toggle check in button status

    function checkInButtons(state,options) {
        var changeToState = state == "true" ? true : false;
        _this = $('#checkinButton');
        if (changeToState) {
            _this.html("CHECK IN");
            _this.removeClass('disabled');
            if (_this.data('transition-button') != undefined ) {
                _this.addClass('transitionButton');
                _this.removeData('transition-button');
                _this.off("click").on("click",function(){
                    transition($($(this).data('current')),$($(this).data('target')));
                });
            }
            if( _this.data('ajax-button') != undefined ) {
                _this.addClass('ajaxButton');
                _this.removeData('ajax-button');
                _this.off("click").on("click",function(){
                    buttonAjax($(this),$(this).data('data-to-send'));                    
                });
            }
        } else {
            _this.off("click");
            _this.html("CHECKED IN TODAY!");
            _this.removeClass('disabled').addClass('disabled');
            if (_this.hasClass('transitionButton')) {
                _this.data("transition-button",true);
                _this.removeClass('transitionButton');
            }
            if (_this.hasClass('ajaxButton')) {
                _this.data("ajax-button",true);
                _this.removeClass('ajaxButton');
            }
        }
    }

    // This function takes the JSON list of contacts and populate it onto the popup
    function populateImportSelectionList(list) {
        $('.modalView#listSelect .importSelectionTable tbody').html("");
        var incrementer = 0;
        var contacts = list;
        returnedData,list = null; //this is to clear up the reference to the object to make it available for garbage collection after we're done
        contacts.forEach(function(contact){
            contact.incID = incrementer;
            $('.modalView#listSelect #importSelectionTable tbody').append('<tr data-inc-id='+incrementer+'><td class="import" ><input type="checkbox" class="importCheck" data-inc-id='+incrementer+' data-id="'+contact.id+'" data-name="'+contact.name+'" data-email="'+contact.email+'" data-phone="'+contact.phone.join('|>-<+|%')+'" data-other-emails="'+contact.other_emails.join('|>-<+|%')+'" ></td><td class="name" >'+contact.name+'</td><td class="email">'+contact.email+'</td><td class="phone">'+contact.phone.join(', ')+'</td><td class="other_emails">'+contact.other_emails.join(', ')+'</td></tr>');
            incrementer++;
        });
        
        $('#importContacts .search').off("keyup").on("keyup",function(){
            var keyword = $(this).val().toLowerCase();
            var matchedItemsIDs = contacts.filter(function(c){ return ((c.name+" "+c.email+" "+c.phone.join(', ')+" "+c.other_emails.join(', ')).toLowerCase().indexOf(keyword) > -1 ) }).map(function(c){return c.incID });
            $('#importContacts table tbody tr').each(function(){
                if ( matchedItemsIDs.indexOf($(this).data('inc-id')) > -1 ) {
                    $(this).removeClass("hidden");
                } else {
                    $(this).removeClass("hidden").addClass('hidden');
                }
            });

        });
        $('.modalView#listSelect .modalBottomRightButton').off("click").on('click',function(){
            var contactListToSend = [];
            $('#importContacts table tbody tr td.import input[type=checkbox]').each(function(){
                if ($(this).prop('checked')) {
                    contactListToSend.push({id:$(this).data('id'),name:$(this).data('name'),email:$(this).data('email'),phone:$(this).data('phone'),other_emails:$(this).data('other-emails') })
                }
            });
            buttonAjax($(this),{contactsToImport:contactListToSend,mergeName:$('#importContacts #mergeName').prop('checked')});
        });

        
    }


// utility functions

    // check if an array is a subset of another array
    function isSubset(x,y,xValuesToIgnore,yValuesToIgnore) {
        x_removed = xValuesToIgnore.length > 0 ? x.filter(function(xEl){ return xValuesToIgnore.indexOf(xEl) == -1 }) : x;
        y_removed = yValuesToIgnore.length > 0 ? y.filter(function(yEl){ return yValuesToIgnore.indexOf(yEl) == -1 }) : y;
        var result = true;
        if (x_removed.length > 0) {
            x_removed.forEach(function(el){
                if(y_removed.indexOf(el) == -1) {result = false;}
            });        
        }
        return result;
    }



})

</script>
<div id="profile">
    <div id="logo">
        <%= image_tag "logo-white", width:"125" %>
    </div>
    
        <div class="profileButtonsContainer showOnMobile">
            <div class="profileButton" id="addConnection" >
                <%= fa_icon 'user-plus' %>
            </div>
            <div class="profileButton showOnMobile" id="settingLogoutToggle" style="display:none">
                <%= fa_icon 'bars' %>
            </div>
        </div>
        <div class="profileButtonsContainer hideOnMobile showOnDesktop" >
            <div class="profileButton" id="accountSettings" href="<%= get_user_settings_path %>" data-method="GET">
                <p class="showOnMobile" style="display:none;">Settings</p>
                <%= fa_icon 'cog' %>
            </div>
            <div class="divider showOnMobile" style="display:none;"></div>
            <div class="profileButton" id="logout">
                <p class="showOnMobile" style="display:none;">Log out</p>
                <a href="<%= logout_path %>"><%= fa_icon 'sign-out' %></a>
            </div>
        </div>    
</div>


<div id="navigation-tabs-container">
    <div class="topTabs-header clearfix">
        <ul class="etabs tabs" id="navigation">
            <li class="tab"><a href="#mySphere"><div class="notificationContainer"><span class="userLevelNotificationDisplayElement" id="my_sphere"><%= fa_icon 'circle-o' %><br><span class="hideOnMobile">MY SPHERE</span></span></div></a></li>
            <li class="tab"><a href="#challenges"><div class="notificationContainer"><span class="userLevelNotificationDisplayElement" id="new_challenge"><%= fa_icon 'map' %><br><span class="hideOnMobile">CHALLENGES</span></span></div></a></li>
            <li class="tab"><a href="#progress"><div class="notificationContainer"><span class="userLevelNotificationDisplayElement" id="level_up"><%= fa_icon 'bar-chart' %><br><span class="hideOnMobile">PROGRESS</span></span></div></a></li>
            <li class="tab"><a href="#achievements"><div class="notificationContainer"><span class="userLevelNotificationDisplayElement" id="new_badge"><%= fa_icon 'star' %><br><span class="hideOnMobile">ACHIEVEMENTS</span></span></div></a></li>
        </ul>        
    </div> 
    <div class="topTabsContent">
        <div id="mySphere" style="overflow:scroll;">

            <div id="canvas" style="position: relative; margin: auto;"></div>            
            <div id="searchBar">
                <div class="result hidden">
                    <ul>
                        <li class="item">
                            <span class="email">Search connection by name, email, or tags</span>
                        </li>
                    </ul>
                </div>
                <div class="speechBubbleThingy hidden"></div>
                <input type="text" class="formElement" placeholder="Search Sphere">
            </div>
        </div>
        <div id="challenges" style="display:none;">
            <div class="title">
                <h1 class="textDarkGray">Your challenges for the week</h1>
            </div>
            <div class="container">
                <div class="row">
                    <% @challenges.each  do |user_challenge| %>
                        <div class="cardColumn col-lg-4 col-md-4 col-sm-6 col-sm-6 col-xs-12">
                            <div class="card challengeCard" data-id="<%= user_challenge.challenge.id %>" data-status="<%= user_challenge.status %>" data-total-days="<%= user_challenge.challenge.days_to_complete %>" data-days-remaining="<%= (user_challenge.date_to_be_completed - Date.today) if user_challenge.date_to_be_completed %>" >
                                <div class="corner-ribbon top-right sticky yellow <%= "hidden" if user_challenge.notifications.length == 0 %>">New!</div>
                                <div class="title">
                                    <h2 class="textDarkGray"><%= user_challenge.challenge.name %></h2>
                                </div>
                                <div class="graphic">
                                    <div class="graphicWrapper">
                                        <%= user_challenge.challenge.graphic.blank? ? "" : (image_tag user_challenge.challenge.graphic, alt:"Challenge Graphics") %>
                                    </div>
                                </div>
                                <div class="subtitle">
                                   <p class="textDarkGray"><%= user_challenge.challenge.instructions %></p>
                                </div>
                                <div class="buttons">
                                    <div class="sphereGreenBackground hoverable modalBottomLeftButton ajaxButton start <%= 'hidden' if user_challenge.status == 'progressing' %>" data-method="PUT" href="<%= start_challenge_path %>" data-data-to-send="({challenge_id:<%= user_challenge.challenge.id %>})">
                                        START
                                    </div>
                                    <div class="sphereRedBackground hoverable modalBottomLeftButton ajaxButton complete <%= 'hidden' unless user_challenge.status == 'progressing' %>" data-method="PUT" href="<%= complete_challenge_path %>" data-data-to-send="({challenge_id:<%= user_challenge.challenge.id %>})">
                                        COMPLETE
                                    </div>
                                    <div class="sphereBlueBackground hoverable modalBottomRightButton" data-details="<%= h user_challenge.challenge.description %>">
                                        LEARN
                                    </div>
                                </div>
                            </div> 
                        </div>
                    <% end %>                    
                </div>
            </div>
        </div>
        <div id="progress" style="display:none;">
            <div class="title">
                <h1 class="textDarkGray">How you're doing so far</h1>
            </div>
            <div id="levelDisplay">
                <div class="content">
                    <div class="graphic">
                        <%= @level_object.graphic.blank? ? "" : (image_tag @level_object.graphic, alt:"Level Graphic") %>
                    </div>
                    <div class="details">
                        <div class="level">
                            <h2 class="textDarkGray">Level <%= @level_num %></h2>
                        </div>
                        <div class="progress progressBar">
                            <div class="progress-bar bar-green" style="width:<%= @level_progress_percent_string %>"></div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="details">
                
            </div>
        </div>
        <div id="achievements" style="display:none;">
            <div class="title">
                <h1 class="textDarkGray">Achievements</h1>
            </div>
            <div class="container">
                <div class="row">
                    <% @badges.each  do |user_badge| %>
                        <div class="cardColumn col-lg-4 col-md-4 col-sm-6 col-sm-6 col-xs-12">
                            <div class="card badgeCard" data-id="<%= user_badge.badge.id %>">
                                <div class="corner-ribbon top-right sticky yellow <%= "hidden" if user_badge.notifications.length == 0 %>">New!</div>
                                <div class="title">
                                    <h2 class="textDarkGray"><%= user_badge.badge.name %></h2>
                                </div>
                                <div class="graphic">
                                    <%= user_badge.badge.graphic.blank? ? "" :  (image_tag user_badge.badge.graphic, alt:"Badge Graphics")  %>
                                </div>
                                <div class="subtitle">
                                   <p class="textDarkGray"><%= user_badge.badge.description %></p>
                                </div>
                            </div> 
                        </div>
                    <% end %>                    
                </div>
            </div>            
        </div>
    </div>
</div>

<div data-remodal-id="bubbleModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="plans">
        <div class="modalContentContainer">
            <div style="color:#656268; font-size:20px;"><input name="name" class="name hoverInput inPlaceField" href="<%= update_connection_name_path %>" data-id="" data-method='PUT' style="border:none;text-align:center; width:80%; border-radius:10px;"></div>
            <div style="color:#656268; font-size:12px;font-style:italic;"><input name="email" class="email hoverInput inPlaceField" href="<%= update_connection_email_path %>" data-id="" data-method='PUT' placeholder="Add email" data-skip-clear="true" style="border:none;text-align:center; width:80%; border-radius:10px;"></div>
            <div style="color:#656268; margin-top: 0px; font-size:15px;font-weight:lighter"><span class="lastHangout"></span></div>
            <div style="height:140px;margin-top:25px;">
                <div class="photo transitionButton" alt="No photo available" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#editConnection" style="cursor:pointer; width:120px;height:120px;border-radius:50%; border:none; display:block; margin:auto;"></div>
                <div class="icon transitionButton textLightGray" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#editConnection" style="display:inline-block; cursor:pointer; width:120px;height:120px;border-radius:50%; border:none;font-size:120px;" >
                    <%= fa_icon 'user-circle' %>
                </div> 
            </div>
            <div style="font-size:15px;color:#656268"><span class="nextHangout"></span></div>
            <select name="tags" id="tokenize" multiple="multiple" class="modalTokenBox" href="<%= update_tags_path %>" data-method="PUT">
            </select>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereBlueBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#makePlan">MAKE PLANS</div>
            <div id="checkinButton" class="modalBottomRightButton <%= if (@setting_for_activity_entry_details && @setting_for_activity_entry_details.value_in_specified_type > 1); "transitionButton" else "ajaxButton createActivity disableWhileProcessed doNotReenable"  end  %> sphereGreenBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#plans" data-target="[data-remodal-id=bubbleModal] .modalView#detailedCheckIn" data-method="POST" href="<%= create_activity_path %>"  <%= if !(@setting_for_activity_entry_details && @setting_for_activity_entry_details.value_in_specified_type > 1); "data-data-to-send=({activity_definition_id:#{@activity_definitions.take.id}})" end %> >CHECK IN</div>
        </div>
    </div>
    <% if @activity_definitions %>
        <div class="modalView" id="detailedCheckIn">
            <div class="modalContentContainer">
                <ul>
                    <% @activity_definitions.each do |activity_definition| %>
                        <li>
                            <div class="checkInButton ajaxButton createActivity" data-data-to-send="({activity_definition_id:<%= activity_definition.id %>})" href="<%= create_activity_path %>" data-method="POST" >
                                <%= activity_definition.activity.capitalize %>
                            </div>
                        </li>
                    <% end %>
                </ul>
            </div>
            <div class="modalButtonContainer">
                <div class="modalBottomFullButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#detailedCheckIn" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            </div>            
        </div>
    <% end %>
    <div class="modalView hidden" id="makePlan">
        <div class="modalContentContainer p-h-xxlg">
            <span class="textDarkGray">Choose Activity and Date</span>
            <form action="<%= plans_path %>" method="POST" >
                <div class="btn-group buttonGroupWithOther chooseActivity" style="height:50px;"  role="group">
                    <button class="btn btn-light-grey btn-secondary active" style="width:20%;height:100%;" data-value="Coffee"  data-slide-down=".modalView#makePlan .activityName" data-toggle="tooltip" data-placement="top" data-html="true" title="Coffee"><%= image_tag 'coffee', width: 33 %></button>
                    <button class="btn btn-light-grey btn-secondary" style="width:20%;height:100%;" data-value="Food"  data-slide-down=".modalView#makePlan .activityName" data-toggle="tooltip" data-placement="top" data-html="true" title="Food"><%= image_tag 'food', width: 33 %></button>
                    <button class="btn btn-light-grey btn-secondary" style="width:20%;height:100%;" data-value="Drinks"  data-slide-down=".modalView#makePlan .activityName" data-toggle="tooltip" data-placement="top" data-html="true" title="Drinks"><%= image_tag 'drinks', width: 33 %></button>
                    <button class="btn btn-light-grey btn-secondary" style="width:20%;height:100%;" data-value="Catch up"  data-slide-down=".modalView#makePlan .activityName" data-toggle="tooltip" data-placement="top" data-html="true" title="Catch up"><%= image_tag 'phone', width: 33 %></button>
                    <button class="btn btn-light-grey btn-secondary" style="width:20%;height:100%;font-size:30px;" data-value="other"  data-slide-down=".modalView#makePlan .activityName"><%= fa_icon 'plus' %></button>
                </div>
                <div class="formElement m-t-sm activityName" style="display:none;">
                    <span class="icon textDarkGray" ><%= fa_icon 'soccer-ball-o' %></span>
                    <input type="text" id="scheduleActivityName" data-skip-clear="true" data-default-value="Coffee" class="inputData field textDarkGray" name="name" placeholder="Activity" value="Coffee" required />
                </div>
                <div class="formElement button m-t-sm date" data-default-class="formElement button m-t-sm date">
                    <span class="icon textDarkGray" ><%= fa_icon 'calendar-o' %></span>
                    <input type="text" style="float:left" class="button inputData field textDarkGray" name="date" id="scheduleDatePicker" placeholder="Date (YYYY-MM-DD)" />
                </div>
                <div class="formElement halfRow left m-t-sm timeFrom" data-default-class="formElement halfRow left m-t-sm timeFrom" style="float:left;">
                    <span class="icon textDarkGray" ><%= fa_icon 'clock-o' %></span>
                    <input type="text" class="inputData field textDarkGray" id="scheduleTimeFrom" name="timeFrom" placeholder="From (e.g. 1:05pm)" required />
                </div>
                <div class="formElement halfRow right m-t-sm timeTo" data-default-class="formElement halfRow right m-t-sm timeTo" style="float:right;">
                    <span class="icon textDarkGray" ><%= fa_icon 'clock-o' %></span>
                    <input type="text" class="inputData field textDarkGray" id="scheduleTimeTo" name="timeTo" placeholder="To (e.g. 2pm)" required />
                </div>
                <div class="formElement m-t-sm" style="margin-top:55px;">
                    <span class="icon textDarkGray" ><%= fa_icon 'map-marker' %></span>
                    <input type="text" id="scheduleLocation" class="inputData field textDarkGray" name="location" placeholder="Location (Optional)" />
                </div>
                <div class="formElement m-t-sm">
                    <span class="icon textDarkGray" ><%= fa_icon 'pencil' %></span>
                    <input  type="text" class="inputData field textDarkGray" name="details" placeholder="Notes (Optional)" />
                </div>
                <div class="formElement m-t-sm hidden default_hidden errorFormInput email" data-default-class="formElement m-t-sm hidden default_hidden errorFormInput email">
                    <span class="icon textDarkGray" >@</span>
                    <input type="text" class="input-text inputData field textDarkGray" placeholder="Email" name="connection_email">
                </div>
                <input type="hidden" class="inputData" name="connection_id">
                <input type="hidden" class="inputData" name="plan_id">
                <%= check_box_tag 'notify',true,@settings[:send_event_booking_notification_by_default], style:"display:inline-box;", class:'inputData' %>
                <label for="notify" class="textDarkGray">Send invite?</label>
                    <div class="btn btn-red disableWhileProcessed" style="display:block;color:#FFF;width:150px;" class="hidden" href="<%= cancel_plan_path %>" data-method="PUT" id="deleteEvent">CANCEL</div>
            
            </form>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#makePlan" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable disableWhileProcessed putInCalendar" data-submit-form=".modalView#makePlan form">PUT IN CALENDAR</div>
        </div>
    </div>
    <div class="modalView hidden" id="editConnection">
        <div class="modalContentContainer">
            <form id="connectionInfo">
                <span class="textDarkGray">How often do you want to stay in touch?</span>
                <div class="btn-group contactFrequency buttonGroupWithOther" role="group">
                    <button class="btn btn-light-grey btn-secondary" style="width:33%" data-value="weekly" data-slide-down=".modalView#editConnection .details" >WEEKLY</button>
                    <button class="btn btn-light-grey btn-secondary" style="width:34%" data-value="monthly" data-slide-down=".modalView#editConnection .details" >MONTHLY</button>
                    <button class="btn btn-light-grey btn-secondary" data-slide-down=".modalView#editConnection .details" style="width:33%" data-value="other">OTHER</button>
                </div>
                <div class="details" style="display:none;" >
                    Every <input type="number" name="other_days" id="other_days" size="3" min="1" value="14" data-skip-clear="true" data-default-class=""> days
                </div>

                <input name="photoUploader" class="hiddenUploader" id="photoUploader" type="file" accept="image/*">
                <label for="photoUploader" class="textDarkGray" style="margin-top: 20px;">
                    <%= fa_icon 'id-badge' %>
                    Upload Photo
                </label>
                <textarea name="notes" rows="4" placeholder="Notes" class="textDarkGray"></textarea>
                <%= link_to "Delete Connection (testing purpose button)", destroy_connection_path, method: :put, id: "destroy_single_connection" %>
            </form>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton transitionButton sphereRedBackground hoverable" data-current="[data-remodal-id=bubbleModal] .modalView#editConnection" data-target="[data-remodal-id=bubbleModal] .modalView#plans">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable disableWhileProcessed">UPDATE</div>
        </div>
    </div>
</div>


<div data-remodal-id="importModal" style="height:450px;" data-default-css="([{'attribute':'height','value':'450px'}])">
    <div class="modalView" id="mainImportView">
        <div class="modalContentContainer">
            <div class="addConnectionPopupContent" >
                <div class="formElement button textDarkGray disableWhileProcessed" href="<%= import_connection_path %>" data-method="put" data-data-to-send="({'provider':'google'})" id="importContactsGoogle" > <%= image_tag 'google-logo-small', width: 20 %> Import from Google</div>
                <div class="formElement button textDarkGray disableWhileProcessed ajaxButton m-t-xs" href="<%= list_expired_connections_path %>"><%= fa_icon 'users' %> Re-add Expired Connections</div>
                <br>
                <h2 style="width:100%;text-align:center;border-bottom:1px solid #E0E0E0;line-height:0.34em;margin:0px 0px 20px;"><span style="font-size:14px;color:#787878;background-color:#f0f0f0;padding:0 19px;background:#FFF;">Or enter manually</span></h2>
                <form action="<%= create_connection_path %>" method="POST">
                    <div class="vex-custom-field-wrapper">
                        <input class="formElement halfRow left m-b-md inputData clearInputAfterUpdate" data-default-class="formElement m-b-xs inputData" name="name" type="text" placeholder="name" required>
                        <input class="formElement m-b-xs inputData clearInputAfterUpdate" name="email" type="text" placeholder="email" >
                        <input name="photoUploaderInCreate" class="inputData clearInputAfterUpdate hiddenUploader" id="photoUploaderInCreate" type="file" accept="image/*">
                        <label for="photoUploaderInCreate" class="textDarkGray m-b-xs formElement button clearInputAfterUpdate" data-default-value='<%= h fa_icon 'id-badge' %> Upload Photo'>
                            <%= fa_icon 'id-badge' %>
                            Upload Photo
                        </label>                        
                        <textarea class="formElement inputData clearInputAfterUpdate" name="notes" placeholder="notes" rows="2" required></textarea>
                        <select name="tags" id="tokenizeInCreate" multiple="multiple" class="modalTokenBox inputData tokenized clearInputAfterUpdate" data-token-variable="tokenInCreate">
                        </select>
                    </div>
                    <div class="alert hidden default_hidden" id="connectionFormAlert" style="margin-top:1px;line-height:10px;"></div>
                </form>
            </div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomFullButton sphereBlueBackground hoverable  disableWhileProcessed submitButton" data-submit-form=".modalView#mainImportView form">
                <span>ADD TO SPHERE</span>
            </div>
        </div>
    </div>

    <div class="modalView hidden" id="listSelect">
        <div class="modalContentContainer p-h-xxlg">
            <div id="importContacts">
                <div class="alert hidden default_hidden" id="connectionFormAlert" style="margin-top:1px;line-height:10px;position:absolute;top:0px;left:0px;"></div>
                <input type="text" class="search formElement" placeholder="Search">
                <%= check_box_tag 'mergeName',true,true, style:"display:inline-box;", class:"m-t-sm" %>
                <label for="mergeName" class="textDarkGray m-t-sm">Merge contacts with the same name</label>
                <table id="importSelectionTable" class="table table-sm m-t-md table-hover textDarkGray">
                    <thead class="thead-default">
                        <th>Import?</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Numbers</th>
                        <th>Other Emails</th>
                    </thead>
                    <tbody class="list">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton sphereRedBackground hoverable transitionButton" data-current="[data-remodal-id=importModal] .modalView#listSelect" data-target="[data-remodal-id=importModal] .modalView#mainImportView">BACK</div>
            <div class="modalBottomRightButton sphereBlueBackground hoverable  disableWhileProcessed" href="<%= create_from_import_path %>" data-method="POST">ADD TO SPHERE</div>
        </div>
    </div>


    <div class="modalView hidden" id="expiredConnections">
        <div class="modalContentContainer p-h-xxlg">

        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomFullButton sphereRedBackground hoverable transitionButton" data-current=".modalView#expiredConnections" data-target=".modalView#mainImportView">
                <span>BACK</span>
            </div>
        </div>
    </div>


</div>

<div data-remodal-id="settingsModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="settingsSelect">
        <div class="modalContentContainer p-h-xxlg">
            <div class="textDarkGray" id="settingsContainer" style="text-align:left">
                <div class="m-b-md">
                    <div id="send_event_booking_notification_by_default_title"></div>
                    <div><input type='checkbox' class="settingInput inputData" name='send_event_booking_notification_by_default' id='send_event_booking_notification_by_default_value' value=''></div>
                </div>
<!--                 <div class="m-b-md">
                    <div id="share_my_calendar_with_contacts_title"></div>
                    <div><input type='checkbox' class="settingInput inputData" name='share_my_calendar_with_contacts' id='share_my_calendar_with_contacts_value' value=''></div>
                </div> -->
                <div class="m-b-md">
                    <div id="default_contact_interval_in_days_title"></div>
                    <div><input type='number' class="settingInput settingInput formElement standardHeight inputData" name='default_contact_interval_in_days' id='default_contact_interval_in_days_value'></div>
                </div>
                <a href="<%= clear_connections_path %>">Clear contacts (testing button)</a>
<!--                 <div class="m-b-md">
                    <div id="event_add_granularity_title"></div>
                    <div>
                        <select class="settingInput formElement button standardHeight inputData" name='event_add_granularity'>
                            <option value='detailed' id="event_add_granularity_detailed_value">Detailed</option>
                            <option value='quick' id="event_add_granularity_quick_value" >Quick</option>
                        </select>
                    </div>
                </div>                 -->
            </div>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton sphereBlueBackground hoverable ajaxButton" href="<%= get_user_info_path %>" data-method="GET">MY INFO</div>
            <div class="modalBottomRightButton sphereGreenBackground hoverable disableWhileProcessed" href="<%= update_user_settings_path %>" data-method="PUT" data-alert-element=".modalView#settingsSelect .alert">UPDATE</div>
        </div>
    </div>



    <div class="modalView" id="userInfo">
        <div class="modalContentContainer p-h-xxlg">
            <form action="<%= update_user_info_path %>" method="PUT">
                <input type="text" class="formElement inputData m-b-md" data-default-class="formElement inputData m-b-md" name="firstName" placeholder="First name">
                <input type="text" class="formElement inputData m-b-md" data-default-class="formElement inputData m-b-md" name="lastName" placeholder="Last name">
                <input type="text" class="formElement inputData m-b-md" data-default-class="formElement inputData m-b-md" name="phoneNumber" placeholder="Phone">
                <input name="photoUploaderInUserInfo" class="inputData clearInputAfterUpdate hiddenUploader" id="photoUploaderInUserInfo" type="file" accept="image/*">
                <label for="photoUploaderInUserInfo" class="textDarkGray m-b-md formElement button clearInputAfterUpdate" data-default-value='<%= h fa_icon 'id-badge' %> Upload Photo'>
                    <%= fa_icon 'id-badge' %>
                    Upload Photo
                </label>
            </form>
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomLeftButton sphereBlueBackground hoverable ajaxButton"  href="<%= get_user_settings_path %>" data-method="GET">SETTINGS</div>
            <div class="modalBottomRightButton sphereGreenBackground hoverable disableWhileProcessed submitButton" data-submit-form=".modalView#userInfo form">UPDATE</div>
        </div>
    </div>
</div>
 
<div data-remodal-id="challengeDetailsModal" data-default-css="([{'attribute':'height','value':'400px'}])">
    <div class="modalView" id="challengeDetails">
        <div class="modalContentContainer p-h-xxlg">
            
        </div>
        <div class="modalButtonContainer">
            <div class="modalBottomFullButton sphereGreenBackground hoverable" data-remodal-action="cancel" class="remodal-cancel">GOT IT</div>
        </div>
    </div>
</div>